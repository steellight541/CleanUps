// <auto-generated />
using System;
using CleanUps.DataAccess.DatabaseHub;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanUps.DataAccess.Migrations
{
    [DbContext(typeof(CleanUpsContext))]
    [Migration("20250404084858_AddEnumRolePasswordHash")]
    partial class AddEnumRolePasswordHash
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanUps.BusinessLogic.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("DateOfEvent")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("FamilyFriendly")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfAttendees")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("TrashCollected")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CleanUps.BusinessLogic.Models.EventAttendance", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventAttendances");
                });

            modelBuilder.Entity("CleanUps.BusinessLogic.Models.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PhotoData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("PhotoId");

                    b.HasIndex("EventId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("CleanUps.BusinessLogic.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK_User");

                    b.HasIndex(new[] { "Email" }, "UQ_Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CleanUps.BusinessLogic.Models.EventAttendance", b =>
                {
                    b.HasOne("CleanUps.BusinessLogic.Models.Event", "Event")
                        .WithMany("EventAttendances")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_EventAttendancesEventId");

                    b.HasOne("CleanUps.BusinessLogic.Models.User", "User")
                        .WithMany("EventAttendances")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_EventAttendancesUserId");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CleanUps.BusinessLogic.Models.Photo", b =>
                {
                    b.HasOne("CleanUps.BusinessLogic.Models.Event", "Event")
                        .WithMany("Photos")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_PhotosId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CleanUps.BusinessLogic.Models.Event", b =>
                {
                    b.Navigation("EventAttendances");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("CleanUps.BusinessLogic.Models.User", b =>
                {
                    b.Navigation("EventAttendances");
                });
#pragma warning restore 612, 618
        }
    }
}
