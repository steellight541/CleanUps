using CleanUps.BusinessLogic.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;

namespace CleanUps.DataAccess.DatabaseHub;

public partial class CleanUpsContext : DbContext
{
    public CleanUpsContext()
    {
    }

    public CleanUpsContext(DbContextOptions<CleanUpsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Event> Events { get; set; }
    public virtual DbSet<Location> Locations { get; set; }
    public virtual DbSet<Role> Roles { get; set; }
    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<EventAttendance> EventAttendances { get; set; }

    public virtual DbSet<Photo> Photos { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            throw new InvalidOperationException("DbContext has not been configured. Ensure that AddDbContext is called in Program.cs with a valid connection string.");        }
        
        optionsBuilder.ConfigureWarnings(w => w.Ignore(RelationalEventId.PendingModelChangesWarning));
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Event>(entity =>
        {
            entity.HasOne(e => e.Location)           // Event has one Location
                .WithMany()                          // Location can be referenced by many Events (adjust if needed)
                .HasForeignKey(e => e.LocationId)
                .OnDelete(DeleteBehavior.NoAction);

            entity.HasOne(e => e.Status)           // Event has one Status
                .WithMany()                          // Status can be referenced by many Events (adjust if needed)
                .HasForeignKey(e => e.StatusId)
                .OnDelete(DeleteBehavior.NoAction);

            entity.Property(e => e.TrashCollected).HasColumnType("decimal(18, 0)");
            
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime2");
                
            entity.Property(e => e.isDeleted)
                .HasDefaultValue(false);

            entity.ToTable(tb => tb.HasTrigger("TR_Events_InsteadOfDelete"));
            entity.ToTable(t => t.HasCheckConstraint("CHK_EndTimeAfterStartTime", "EndTime > StartTime"));
        });

        modelBuilder.Entity<EventAttendance>(entity =>
        {
            entity.HasKey(e => new { e.EventId, e.UserId });

            entity.Property(e => e.CheckIn).HasColumnType("datetime");
            
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime2");

            entity.HasOne(d => d.Event).WithMany(p => p.EventAttendances)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_EventAttendances_Events_EventId");

            entity.HasOne(d => d.User).WithMany(p => p.EventAttendances)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_EventAttendances_Users_UserId");
        });

        modelBuilder.Entity<Photo>(entity =>
        {
            entity.Property(e => e.Caption).HasMaxLength(255);

            entity.HasOne(d => d.Event).WithMany(p => p.Photos)
                .HasForeignKey(d => d.EventId)
                .OnDelete(DeleteBehavior.NoAction)
                .HasConstraintName("FK_Photos_Events_EventId");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_User");

            entity.HasIndex(e => e.Email, "UQ_Email").IsUnique();

            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
                
            entity.Property(e => e.isDeleted)
                .HasDefaultValue(false);
                
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.PasswordHash).HasMaxLength(50);

            entity.HasOne(e => e.Role)
                .WithMany()
                .HasForeignKey(e => e.RoleId)
                .OnDelete(DeleteBehavior.NoAction);
                 
            entity.ToTable(tb => tb.HasTrigger("TR_Users_InsteadOfDelete"));
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.Property(l => l.Latitude)
            .HasPrecision(10, 7);

            entity.Property(l => l.Longitude)
            .HasPrecision(10, 7);

            entity.Property(l => l.Id)
            .ValueGeneratedOnAdd(); // Ensures ID is generated by the database
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
