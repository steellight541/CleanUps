@inherits LayoutComponentBase
@using CleanUps.MAUI.Shared.Layout
@inject NavigationManager NavigationManager

<div class="page">
    <!-- Top blue bar with page title and recycle icon -->
    <div class="top-nav-bar d-flex align-items-center">
        <div class="recycle-icon ms-3">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="white" class="bi bi-recycle" viewBox="0 0 16 16">
                <path d="M9.302 1.256a1.5 1.5 0 0 0-2.604 0l-1.704 2.98a.5.5 0 0 0 .869.497l1.703-2.981a.5.5 0 0 1 .868 0l2.54 4.444-1.256-.337a.5.5 0 1 0-.26.966l2.415.647a.5.5 0 0 0 .613-.353l.647-2.415a.5.5 0 1 0-.966-.259l-.333 1.242zM2.973 7.773l-1.255.337a.5.5 0 1 1-.26-.966l2.416-.647a.5.5 0 0 1 .612.353l.647 2.415a.5.5 0 0 1-.966.259l-.333-1.242-2.545 4.454a.5.5 0 0 0 .434.748H5a.5.5 0 0 1 0 1H1.723A1.5 1.5 0 0 1 .421 12.24zm10.89 1.463a.5.5 0 1 0-.868.496l1.716 3.004a.5.5 0 0 1-.434.748h-5.57l.647-.646a.5.5 0 1 0-.708-.707l-1.5 1.5a.5.5 0 0 0 0 .707l1.5 1.5a.5.5 0 1 0 .708-.707l-.647-.647h5.57a1.5 1.5 0 0 0 1.302-2.244z"/>
            </svg>
        </div>
        <div class="page-title mx-auto fw-bold">@GetPageTitle()</div>
        <div class="nav-spacer me-3"></div>
    </div>

    <main>
        <article class="content px-4">
            @Body
        </article>
    </main>

    <BottomNav />
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    /// <summary>
    /// Extracts a user-friendly page title from the current URL.
    /// </summary>
    /// <returns>The formatted page title based on the current URL.</returns>
    private string GetPageTitle()
    {
        var uri = new Uri(NavigationManager.Uri);
        var path = uri.AbsolutePath.TrimStart('/');
        
        if (string.IsNullOrEmpty(path))
            return "Home";
            
        // Split the path and take the first segment
        var segments = path.Split('/');
        
        if (segments.Length > 0)
        {
            // Handle special cases
            if (segments[0].Equals("auth", StringComparison.OrdinalIgnoreCase))
            {
                if (segments.Length > 1)
                {
                    if (segments[1].Equals("login", StringComparison.OrdinalIgnoreCase))
                        return "Login";
                    if (segments[1].Equals("signup", StringComparison.OrdinalIgnoreCase))
                        return "Sign Up";
                }
                return "Authentication";
            }
            
            if (segments[0].Equals("events", StringComparison.OrdinalIgnoreCase))
            {
                if (segments.Length > 2 && segments[2].Equals("details", StringComparison.OrdinalIgnoreCase))
                    return "Event Details";
                if (segments.Length > 2 && segments[2].Equals("edit", StringComparison.OrdinalIgnoreCase))
                    return "Edit Event";
                if (segments.Length > 1 && segments[1].Equals("create", StringComparison.OrdinalIgnoreCase))
                    return "Create Event";
                return "Events";
            }
            
            if (segments[0].Equals("users", StringComparison.OrdinalIgnoreCase))
            {
                if (segments.Length > 1 && segments[1].Equals("profile", StringComparison.OrdinalIgnoreCase))
                    return "Profile";
                return "Users";
            }
            
            if (segments[0].Equals("map", StringComparison.OrdinalIgnoreCase))
                return "Map";
            
            // Capitalize the first letter of the path segment
            return char.ToUpper(segments[0][0]) + segments[0][1..];
        }
        
        return "CleanUps";
    }
}
