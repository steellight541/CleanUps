@inherits LayoutComponentBase
@using CleanUps.MAUI.Shared.Layout
@inject NavigationManager NavigationManager

<div class="page">
    <!-- Top blue bar with page title and logo -->
    <div class="top-nav-bar d-flex align-items-center">
        <div class="logo-container ms-3">
            <a href="/" class="logo-link">
                <img src="_content/CleanUps.MAUI.Shared/images/home/cleanup_logo.jpg" alt="CleanUps Logo" class="cleanups-logo" />
            </a>
        </div>
        <div class="page-title mx-auto fw-bold">@GetPageTitle()</div>
        <div class="nav-spacer me-3"></div>
    </div>

    <main>
        <article class="content px-3">
            @Body
        </article>
    </main>

    <BottomNav />
</div>

<style>
    .cleanups-logo {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }
    
    .logo-link {
        display: block;
    }
</style>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    /// <summary>
    /// Extracts a user-friendly page title from the current URL.
    /// </summary>
    /// <returns>The formatted page title based on the current URL.</returns>
    private string GetPageTitle()
    {
        var uri = new Uri(NavigationManager.Uri);
        var path = uri.AbsolutePath.TrimStart('/');
        
        if (string.IsNullOrEmpty(path))
            return "Home";
            
        // Split the path and take the first segment
        var segments = path.Split('/');
        
        if (segments.Length > 0)
        {
            // Handle special cases
            if (segments[0].Equals("auth", StringComparison.OrdinalIgnoreCase))
            {
                if (segments.Length > 1)
                {
                    if (segments[1].Equals("login", StringComparison.OrdinalIgnoreCase))
                        return "Login";
                    if (segments[1].Equals("signup", StringComparison.OrdinalIgnoreCase))
                        return "Sign Up";
                }
                return "Authentication";
            }
            
            if (segments[0].Equals("events", StringComparison.OrdinalIgnoreCase))
            {
                if (segments.Length > 2 && segments[2].Equals("details", StringComparison.OrdinalIgnoreCase))
                    return "Event Details";
                if (segments.Length > 2 && segments[2].Equals("edit", StringComparison.OrdinalIgnoreCase))
                    return "Edit Event";
                if (segments.Length > 1 && segments[1].Equals("create", StringComparison.OrdinalIgnoreCase))
                    return "Create Event";
                return "Events";
            }
            
            if (segments[0].Equals("users", StringComparison.OrdinalIgnoreCase))
            {
                if (segments.Length > 1 && segments[1].Equals("profile", StringComparison.OrdinalIgnoreCase))
                    return "Profile";
                return "Users";
            }
            
            if (segments[0].Equals("map", StringComparison.OrdinalIgnoreCase))
                return "Map";
            
            // Capitalize the first letter of the path segment
            return char.ToUpper(segments[0][0]) + segments[0][1..];
        }
        
        return "CleanUps";
    }
}
