@page "/users/profile"

@inject IAccessService _accessService
@inject NavigationManager _navigationManager

<h3>My Profile</h3>

<div class="card">
    <div class="card-body">
        @if (isLoading)
        {
            <p>Loading profile...</p>
        }
        else
        {
            <h4>@userName</h4>
            <p>Email: @userEmail</p>
            <p>Role: @userRole</p>

            @if (!string.IsNullOrEmpty(statusMessage))
            {
                <div class="alert @(isSuccess ? "alert-success" : "alert-danger")" role="alert">
                    @statusMessage
                </div>
            }
            <div class="mb-2">
                <button class="btn btn-primary" @onclick="Logout">Logout</button>
            </div>


            @if (!showPasswordChangeForm)
            {
                <div class="mb-2">
                    <button class="btn btn-dark" @onclick="TogglePasswordChangeForm">Change Password</button>
                </div>

            }
            else
            {
                <EditForm Model="@passwordModel" OnValidSubmit="ChangePassword">
                    <DataAnnotationsValidator />
                    <div class="mt-3">
                        <h5>Change Password</h5>
                        <div class="form-group">
                            <label for="newPassword">New Password</label>
                            <InputText type="password" class="form-control" id="newPassword" @bind-Value="passwordModel.NewPassword" />
                            <ValidationMessage For="() => passwordModel.NewPassword" />
                        </div>
                        <div class="form-group mt-2">
                            <label for="confirmPassword">Confirm New Password</label>
                            <InputText type="password" class="form-control" id="confirmPassword" @bind-Value="passwordModel.ConfirmNewPassword" />
                            <ValidationMessage For="() => passwordModel.ConfirmNewPassword" />
                        </div>
                        <button type="submit" class="btn btn-success mt-3 me-2" disabled="@isSubmitting">@(isSubmitting ? "Submitting..." : "Submit New Password")</button>
                        <button type="button" class="btn btn-secondary mt-3" @onclick="TogglePasswordChangeForm" disabled="@isSubmitting">Cancel</button> @* Changed to type="button" *@
                    </div>
                </EditForm>
            }

        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private string userName = string.Empty;
    private string userEmail = string.Empty;
    private string userRole = string.Empty;
    private bool isLoggedIn = false;

    private bool showPasswordChangeForm = false;
    private string statusMessage = string.Empty;
    private bool isSuccess = false;
    private bool isSubmitting = false;

    private PasswordChangeModel passwordModel = new PasswordChangeModel();
    protected override async Task OnInitializedAsync()
    {
        // Check if user is logged in (volunteers and organizers)
        try
        {
            isLoggedIn = await _accessService.IsUserLoggedInAsync();
            //Redirect if you arent logged in
            RoleBasedRedirector.CheckVolunteerAccess(isLoggedIn, _navigationManager);

            // Load profile information
            await LoadProfileData();
        }
        catch
        {
            // In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    private async Task LoadProfileData()
    {
        isLoading = true;

        // Get user info from AccessService
        userName = await _accessService.GetLoggedUserNameAsync() ?? "Unknown";
        userEmail = await _accessService.GetLoggedUserEmailAsync() ?? "Unknown";

        RoleDTO? role = await _accessService.GetLoggedUserRoleAsync();

        if (role is not null)
        {
            userRole = role.ToString();
        }
        else
        {
            userRole = "Unknown";
        }

        isLoading = false;
    }

    private void TogglePasswordChangeForm()
    {
        showPasswordChangeForm = !showPasswordChangeForm; // Toggle form visibility
        passwordModel = new PasswordChangeModel(); // Reset the model
        statusMessage = string.Empty; // Clear status message when toggling
    }

    // Updated to handle valid submission from EditForm
    private async Task ChangePassword()
    {
        statusMessage = string.Empty;
        isSuccess = false;
        isSubmitting = true;

        // Basic validation is now handled by EditForm and DataAnnotations
        // Manual checks can be kept for logic not covered by attributes

        try
        {
            // Call the service with the new password from the model
            var changePasswordResult = await _accessService.ChangePasswordAsync(passwordModel.NewPassword);
            if (changePasswordResult.IsSuccess)
            {
                isSuccess = true;
                statusMessage = "Password changed successfully!";
                showPasswordChangeForm = false; // Hide form on success
                passwordModel = new PasswordChangeModel(); // Reset the model
            }
            else
            {
                statusMessage = changePasswordResult.ErrorMessage ?? "Failed to change password.";
            }
        }
        catch
        {
            // Log the exception if needed
            statusMessage = "An unexpected error occurred while changing the password.";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged(); // Ensure UI updates after async operation
        }
    }

    private async Task Logout()
    {
        await _accessService.ClearUserSessionAsync();
        _navigationManager.NavigateTo("/events");
    }

    // Model definition with validation attributes
    private class PasswordChangeModel
    {
        [Required(ErrorMessage = "New Password is required.")]
        [StringLength(50, MinimumLength = 8, ErrorMessage = "Password must be between 8 and 50 characters long.")]
        // Add other complexity rules here if needed via custom attributes or Regex
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm New Password is required.")]
        [Compare(nameof(NewPassword), ErrorMessage = "New passwords do not match.")]
        public string ConfirmNewPassword { get; set; } = string.Empty;
    }
}