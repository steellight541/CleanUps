@page "/users/{userId:int}/edit"
@using CleanUps.Shared.DTOs.AbstractDTOs
@using CleanUps.Shared.DTOs.Enums
@using CleanUps.Shared.DTOs.Users
@inject NavigationManager _navigationManager
@inject UserApiService _userApiService
<div class="card shadow p-4">

    <h3>Edit User</h3>

    @if (userResult == null)
    {
        <p>Loading...</p>
    }
    else if (!userResult.IsSuccess)
    {
        <p class="text-danger">Error: @userResult.ErrorMessage</p>
    }
    else
    {
        <EditForm Model="editModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-2">
                <label for="name">Name</label>
                <InputText id="name" @bind-Value="editModel.Name" class="form-control" />
            </div>

            <div class="form-group mb-2">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="editModel.Email" class="form-control" />
            </div>

            <!-- Add more fields as needed -->
            <div class="mb-2">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>

        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p class="text-danger">@errorMessage</p>
        }
    }
</div>

@code {
    [Parameter]
    public int userId { get; set; }

    private Result<UserResponse> userResult;
    private UserEditModel editModel;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        userResult = await _userApiService.GetUserByIdAsync(userId);
        if (userResult.IsSuccess)
        {
            editModel = new UserEditModel
                {
                    Name = userResult.Data.Name,
                    Email = userResult.Data.Email
                };
        }
    }

    private async Task HandleSubmit()
    {
        var updatedUser = new UpdateUserRequest(userId, editModel.Name, editModel.Email);

        var result = await _userApiService.UpdateUserAsync(userId, updatedUser);
        if (result.IsSuccess)
        {
            _navigationManager.NavigateTo("/users");
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "An error occurred while updating the user.";
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/users");
    }

    private class UserEditModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
    }
}