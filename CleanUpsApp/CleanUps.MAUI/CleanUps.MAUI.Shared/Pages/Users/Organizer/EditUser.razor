@page "/users/{userId:int}/edit"

@inject NavigationManager _navigationManager
@inject IUserApiService _userApiService
@inject IAccessService _accessService

@if (isOrganizer)
{
    <div class="card shadow p-4">

        <h3>Edit User</h3>

        @if (userResult == null)
        {
            <p>Loading...</p>
        }
        else if (!userResult.IsSuccess)
        {
            <p class="text-danger">Error: @userResult.ErrorMessage</p>
        }
        else
        {
            <EditForm Model="editModel" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-2">
                    <label for="name">Name</label>
                    <InputText id="name" @bind-Value="editModel.Name" class="form-control" />
                </div>

                <div class="form-group mb-2">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="editModel.Email" class="form-control" />
                </div>

                <!-- Add more fields as needed -->
                <div class="mb-2">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>

            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p class="text-danger">@errorMessage</p>
            }
        }
    </div>
}
else
{
    <p>Access denied</p>
}
@code {
    [Parameter]
    public int userId { get; set; }

    private Result<UserResponse> userResult;
    private UserEditModel editModel;
    private string errorMessage;
    
    private bool isLoggedIn = false;
    private bool isOrganizer = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if user is an organizer
            isLoggedIn = await _accessService.IsUserLoggedInAsync();
            isOrganizer = await _accessService.IsOrganizerAsync();
            AccessControl.CheckOrganizerAccess(isLoggedIn, isOrganizer, _navigationManager);
            
            // Load user data after access check
            await LoadUser();
        }
        catch
        {
            // In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    private async Task LoadUser()
    {
        userResult = await _userApiService.GetByIdAsync(userId);
        if (userResult.IsSuccess)
        {
            editModel = new UserEditModel
                {
                    Name = userResult.Data.Name,
                    Email = userResult.Data.Email
                };
        }
    }

    private async Task HandleSubmit()
    {
        var updatedUser = new UpdateUserRequest(userId, editModel.Name, editModel.Email);

        var result = await _userApiService.UpdateAsync(updatedUser);
        if (result.IsSuccess)
        {
            _navigationManager.NavigateTo("/users");
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "An error occurred while updating the user.";
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/users");
    }

    private class UserEditModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
    }
}