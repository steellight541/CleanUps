@page "/users/{userId:int}/edit"

@inject NavigationManager _navigationManager
@inject IUserApiService _userApiService
@inject IAccessService _accessService

@using CleanUps.Shared.DTOs.Users
@using System.ComponentModel.DataAnnotations

<div class="card shadow position-relative">
    @* Section: Card Header *@
    <div class="card-header py-3">
        <h3 class="mb-0">Edit User</h3>
    </div>

    @* Section: Card Body *@
    <div class="card-body p-4">
        @* Subsection: Loading Indicator *@
        @if (getUserResult == null)
        {
            <div class="alert alert-info" role="alert">
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="ms-2">Loading user data...</span>
            </div>
        }
        @* Subsection: Error Loading User *@
        else if (!getUserResult.IsSuccess)
        {
            <div class="alert alert-danger" role="alert">Error loading user: @getUserResult.ErrorMessage</div>
            <div class="mt-3">
                 <button class="btn btn-dark" @onclick="Cancel">Back</button>
            </div>
        }
        @* Subsection: Edit User Form *@
        else if (editModel != null)
        {
            <EditForm Model="editModel" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                @* Input: Name *@
                <div class="form-group mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" @bind-Value="editModel.Name" class="form-control" />
                </div>

                @* Input: Email *@
                <div class="form-group mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" @bind-Value="editModel.Email" class="form-control" />
                </div>

                @* Display: Error Message *@
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3" role="alert">@errorMessage</div>
                }
                 
                @* Form Footer (Actions) *@
                <div class="card-footer py-3 d-flex gap-2">
                    <button type="submit" class="btn btn-success" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Saving...</span>
                        }
                        else
                        {
                            <span>Save Changes</span>
                        }
                    </button>
                    <button type="button" class="btn btn-dark" @onclick="Cancel" disabled="@isSubmitting">Cancel</button>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {

    /// <summary>
    /// The user ID of the user to edit.
    /// </summary>
    [Parameter]
    public int userId { get; set; }

    /// <summary>
    /// The result of the user.
    /// </summary>
    private Result<UserResponse> getUserResult;

    /// <summary>
    /// The edit model for the user.
    /// </summary>
    private UserEditModel editModel;

    /// <summary>
    /// Error message from API.
    /// </summary>
    private string errorMessage;

    /// <summary>
    /// Indicates if the user is logged in.
    /// </summary>
    private bool isLoggedIn = false;

    /// <summary>
    /// Indicates if the user is an organizer.
    /// </summary>
    private bool isOrganizer = false;

    /// <summary>
    /// Indicates if the form is currently submitting.
    /// </summary>
    private bool isSubmitting = false;

    /// <summary>
    /// Initializes the component, checks user permissions, and loads the user data.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Step 1: Check if user is logged in
            isLoggedIn = await _accessService.IsUserLoggedInAsync();

            // Step 2: Check if user is an organizer
            isOrganizer = await _accessService.IsOrganizerAsync();
            
            // Step 3: Verify access permissions and redirect if necessary
            RoleBasedRedirector.CheckOrganizerAccess(isLoggedIn, isOrganizer, _navigationManager);
            
            // Step 4: Load user data after access check
            await LoadUser();
        }
        catch
        {
            // Step 5: In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    /// <summary>
    /// Loads the user data from the API and populates the edit model.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task LoadUser()
    {
        try
        {
            // Step 1: Call API to get the user by ID
            getUserResult = await _userApiService.GetByIdAsync(userId);
            
        // Step 2: If successful, populate the edit model with user data
        if (getUserResult.IsSuccess)
        {
            editModel = new UserEditModel
            {
                Name = getUserResult.Data.Name,
                Email = getUserResult.Data.Email
            };
        }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    /// <summary>
    /// Handles the form submission to update the user.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task HandleSubmit()
    {
        // Track submitting state
        isSubmitting = true;
        errorMessage = string.Empty;
        StateHasChanged();
        
        try
        {
            // Step 1: Create update request from form data
            UpdateUserRequest updateRequest = new UpdateUserRequest(userId, editModel.Name, editModel.Email);

            // Step 2: Call API to update the user
            var updateResonse = await _userApiService.UpdateAsync(updateRequest);
            
            // Step 3: Process the result
            if (updateResonse.IsSuccess)
            {
                // Step 4a: If successful, navigate back to users list
                _navigationManager.NavigateTo("/users");
            }
            else
            {
                // Step 4b: If failed, display error message
                errorMessage = updateResonse.ErrorMessage ?? "An error occurred while updating the user.";
            }
        }
        catch (Exception ex)
        {
            // Handle unexpected exceptions
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            // Clear loading state
            isSubmitting = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Navigates to the user details page.
    /// </summary>
    private void Cancel()
    {
        // Step 1: Navigate to the edit page for this user
        _navigationManager.NavigateTo($"/users/{userId}/details");
    }

    /// <summary>
    /// Model class for editing user information with validation attributes.
    /// </summary>
    private class UserEditModel
    {
        /// <summary>
        /// Gets or sets the name of the user.
        /// </summary>
        /// <value>A string that cannot exceed 100 characters.</value>
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters.")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the email address of the user.
        /// Must be in a valid email format.
        /// </summary>
        /// <value>A string in email format that cannot exceed 255 characters.</value>
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        [StringLength(255, ErrorMessage = "Email cannot exceed 255 characters.")]
        public string Email { get; set; }
    }
}