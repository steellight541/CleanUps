@page "/users"

@inject NavigationManager _navigationManager
@inject IUserApiService _userApiService
@inject IAccessService _accessService

<div class="card shadow p-4">
    <h3>Users</h3>

    @* Section: Organizer Actions *@
    <div class="row">
        <div class="col-md-4 mb-3">
            <button class="btn btn-success" @onclick="CreateNewUser">Create New User</button>
        </div>
    </div>

    @* Section: Loading Indicator *@
    @if (loadedUsers == null)
    {
        <p>Loading users...</p>
    }
    else
    {
        @* LARGE SCREEN START *@
        @* Section: Table Layout (Large Screens) *@
        <div class="d-none d-md-block mb-2">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Created Date</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @* Table Row Loop, actually loads the users data (Large Screens) *@
                    @foreach (UserResponse loadedUser in loadedUsers)
                    {
                        <tr>
                            <td>@loadedUser.UserId</td>
                            <td>@loadedUser.Name</td>
                            <td>@loadedUser.Email</td>
                            <td>@loadedUser.CreatedDate</td>
                            <td>@loadedUser.Role.ToString()</td>
                            <td>
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <button class="btn btn-primary btn-sm" @onclick="() => ViewUser(loadedUser.UserId)" disabled="@(isLoadingUsers || deletingUserId == loadedUser.UserId)">View</button>
                                    @if (isOrganizer)
                                    {
                                        <button class="btn btn-secondary btn-sm" @onclick="() => EditUser(loadedUser.UserId)" disabled="@(isLoadingUsers || deletingUserId == loadedUser.UserId)">Edit</button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(loadedUser.UserId)" disabled="@(isLoadingUsers || deletingUserId == loadedUser.UserId)">
                                            @if (deletingUserId == loadedUser.UserId)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-trash-fill"></i>
                                            }
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                    @* Loading Indicator for More Users (Large Screens) *@
                    @if (isLoadingUsers)
                    {
                        <tr>
                            <td colspan="6" class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading more users...
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @* LARGE SCREEN END *@




        @* SMALL SCREEN START *@
        @* Section: List Group Layout (Small Screens) *@
        <div class="d-block d-md-none mb-2">
            @* Card Loop, actually loads the users data (Small Screens) *@
            @foreach (UserResponse loadedUser in loadedUsers)
            {
                <div class="card mb-3 shadow-sm">
                    <div class="card-header position-relative py-2">
                        <h5 class="mb-0 pe-5">@loadedUser.Name</h5>
                        @if (isOrganizer)
                        {
                            <div class="dropdown" style="position: absolute; top: 0.25rem; right: 0.25rem;">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton-sm-@loadedUser.UserId" data-bs-toggle="dropdown" aria-expanded="false">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16" aria-hidden="true">
                                        <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
                                    </svg>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton-sm-@loadedUser.UserId">
                                    <li>
                                        <button class="dropdown-item text-dark" @onclick="() => EditUser(loadedUser.UserId)" disabled="@(isLoadingUsers || deletingUserId == loadedUser.UserId)">
                                            <i class="bi bi-pencil-fill me-2"></i>Edit
                                        </button>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <button class="dropdown-item text-danger" @onclick="() => DeleteUser(loadedUser.UserId)" disabled="@(isLoadingUsers || deletingUserId == loadedUser.UserId)">
                                             @if (deletingUserId == loadedUser.UserId)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span class="ms-1">Deleting...</span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-trash-fill me-2"></i><span>Delete</span>
                                            }
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="card-body py-2 px-3">
                        <p class="card-text mb-1"><small><strong>Email:</strong> @loadedUser.Email</small></p>
                        <p class="card-text mb-0"><small><strong>Role:</strong> @loadedUser.Role.ToString()</small></p>
                    </div>
                    <div class="card-footer d-grid py-2">
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewUser(loadedUser.UserId)" disabled="@(isLoadingUsers || deletingUserId == loadedUser.UserId)">View</button>
                    </div>
                </div>
            }
            @* Loading Indicator for More Users (Small Screens) *@
            @if (isLoadingUsers)
            {
                <div class="text-center p-2">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading more users...
                </div>
            }
        </div>
        @* SMALL SCREEN END *@



        @* Section: Error Display (Combined) *@
        @if (loadError != null || !string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @if (loadError != null)
                {
                    <div>Error loading users: @loadError</div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div>@errorMessage</div>
                }
            </div>
        }
    }
</div>

@code {
    /// <summary>
    /// The result of the users from the API.
    /// </summary>
    private Result<List<UserResponse>> getAllUsersResponse;

    /// <summary>
    /// The collection of users loaded from the API.
    /// </summary>
    private List<UserResponse> loadedUsers = new List<UserResponse>();

    /// <summary>
    /// The error message from the API.
    /// </summary>
    private string errorMessage;

    /// <summary>
    /// The error from loading the users.
    /// </summary>
    private string loadError;

    /// <summary>
    /// Indicates if the users are loading.
    /// </summary>
    private bool isLoadingUsers = false;

    /// <summary>
    /// Indicates if the user is logged in.
    /// </summary>
    private bool isLoggedIn = false;

    /// <summary>
    /// Indicates if the user is an organizer.
    /// </summary>
    private bool isOrganizer = false;

    /// <summary>
    /// Tracks the ID of the user currently being deleted, or -1 if none.
    /// </summary>
    private int deletingUserId = -1;

    /// <summary>
    /// Initializes the component, checks user permissions, and loads user data.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Step 1: Check if user is logged in
            isLoggedIn = await _accessService.IsUserLoggedInAsync();

            // Step 2: Check if user is an organizer
            isOrganizer = await _accessService.IsOrganizerAsync();

            // Step 3: Allow only organizer to view the page - redirect elsewhere otherwise
            RoleBasedRedirector.CheckOrganizerAccess(isLoggedIn, isOrganizer, _navigationManager);

            // Step 4: Load users after access check
            await LoadUsers();
        }
        catch
        {
            // Step 5: In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    /// <summary>
    /// Loads all users from the API with progressive loading effect.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task LoadUsers()
    {
        try
        {
            // Step 1: Set loading state to true and update UI
            isLoadingUsers = true;
            loadedUsers.Clear(); // Clear existing list
            StateHasChanged(); // Refresh the UI

            // Step 2: Call API to get all users
            getAllUsersResponse = await _userApiService.GetAllAsync();

            // Step 3: Process the result
            if (getAllUsersResponse.IsSuccess && getAllUsersResponse.Data != null)
            {
                // Step 4: Simulate progressive loading by adding users one by one with a small delay
                foreach (UserResponse userResponse in getAllUsersResponse.Data)
                {
                    // Step 5: Add each user to the collection
                    loadedUsers.Add(userResponse);

                    // Step 6: Update UI after each user is added
                    StateHasChanged(); // Refresh the UI

                    // Step 7: Small delay to show the progressive loading
                    await Task.Delay(20);
                }
            }
            else
            {
                // Step 8: Handle error if API call failed
                loadError = getAllUsersResponse.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            // Step 9: Handle any unexpected exceptions
            loadError = $"Error loading users: {ex.Message}";
        }
        finally
        {
            // Step 10: Reset loading state and update UI
            isLoadingUsers = false;
            StateHasChanged(); // Refresh the UI
        }
    }

    /// <summary>
    /// Navigates to the user details page.
    /// </summary>
    /// <param name="userId">The ID of the user to view.</param>
    private void ViewUser(int userId)
    {
        // Step 1: Navigate to the user profile page
        _navigationManager.NavigateTo($"/users/{userId}/profile");
    }

    /// <summary>
    /// Navigates to the user edit page.
    /// </summary>
    /// <param name="userId">The ID of the user to edit.</param>
    private void EditUser(int userId)
    {
        // Step 1: Navigate to the user edit page
        _navigationManager.NavigateTo($"/users/{userId}/edit");
    }

    /// <summary>
    /// Deletes a user and refreshes the user list.
    /// </summary>
    /// <param name="userId">The ID of the user to delete.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task DeleteUser(int userId)
    {
        // Track which user is being deleted for UI feedback
        deletingUserId = userId;
        errorMessage = string.Empty;
        StateHasChanged();
        
        try
        {
            // Step 1: Call API to delete the user
            var deleteResult = await _userApiService.DeleteAsync(new DeleteUserRequest(userId));
            
            // Step 2: Process the result
            if (deleteResult.IsSuccess)
            {
                // Step 3: If successful, reload the users list
                await LoadUsers();
            }
            else
            {
                // Step 4: If failed, display error message
                errorMessage = deleteResult.ErrorMessage ?? "An error occurred while deleting the user.";
                StateHasChanged(); // Update UI with error message
            }
        }
        catch (Exception ex)
        {
            // Step 5: Handle any unexpected exceptions
            errorMessage = $"Error deleting user: {ex.Message}";
            StateHasChanged();
        }
        finally
        {
            // Clear the deleting user ID
            deletingUserId = -1;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Navigates to the user creation page.
    /// </summary>
    private void CreateNewUser()
    {
        // Step 1: Navigate to the create user page
        _navigationManager.NavigateTo("/users/create");
    }
}