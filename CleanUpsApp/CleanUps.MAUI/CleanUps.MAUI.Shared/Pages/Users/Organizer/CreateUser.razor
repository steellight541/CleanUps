@page "/users/create"

@inject NavigationManager _navigationManager
@inject IAccessService _accessService
@inject IUserApiService _userApiService


<div class="card shadow p-4">
    <h3>Create New User</h3>

    <EditForm Model="newUserModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="newUserModel.Name" class="form-control" />
        </div>

        <div class="form-group mb-2">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="newUserModel.Email" class="form-control" />
        </div>

        <div class="form-group mb-2">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="newUserModel.Password" class="form-control" aria-describedby="passwordHelpBlock" />
             <div id="passwordHelpBlock" class="form-text">
                Password must be 8-50 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
            </div>
        </div>

         <div class="form-group mb-2">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" type="password" @bind-Value="newUserModel.ConfirmPassword" class="form-control" />
        </div>

        <div class="mb-2">
            <button type="submit" class="btn btn-primary btn-sm" disabled="@isSubmitting">@(isSubmitting ? "Creating..." : "Create User")</button>
            <button type="button" class="btn btn-secondary btn-sm" @onclick="GoBack" disabled="@isSubmitting">Back</button>
        </div>
    </EditForm>

     @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger mt-2">@errorMessage</p>
    }
     @if (!string.IsNullOrEmpty(successMessage))
    {
        <p class="text-success mt-2">@successMessage</p>
    }
</div>

@code {
    private CreateUserModel newUserModel = new CreateUserModel();
    private bool isLoggedIn = false;
    private bool isOrganizer = false;
    private bool isSubmitting = false;
    private string? errorMessage;
    private string? successMessage;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoggedIn = await _accessService.IsUserLoggedInAsync();
            isOrganizer = await _accessService.IsOrganizerAsync();
            RoleBasedRedirector.CheckOrganizerAccess(isLoggedIn, isOrganizer, _navigationManager);
        }
        catch
        {
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    private async Task HandleSubmit()
    {
        isSubmitting = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        CreateUserRequest request = new CreateUserRequest(newUserModel.Name, newUserModel.Email, newUserModel.Password);
        var result = await _userApiService.CreateAsync(request);

        if (result.IsSuccess)
        {
            successMessage = $"User '{newUserModel.Name}' created successfully!";
            newUserModel = new CreateUserModel(); // Reset form
             // Optionally navigate back to list or show success message longer
            // _navigationManager.NavigateTo("/users");
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "Failed to create user.";
        }

        isSubmitting = false;
        StateHasChanged();
        _navigationManager.NavigateTo("/users");
    }


    private void GoBack()
    {
        _navigationManager.NavigateTo("/users");
    }

    // Model for the create user form
    private class CreateUserModel
    {
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters.")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        [StringLength(255, ErrorMessage = "Email cannot exceed 255 characters.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(50, MinimumLength = 8, ErrorMessage = "Password must be between 8 and 50 characters.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}   