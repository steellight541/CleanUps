@page "/users/create"

@inject NavigationManager _navigationManager
@inject IAccessService _accessService


<div class="card shadow p-4">
    <h3>Create New User</h3>

    <div class="mb-2">
        <p>Please visit <strong>Sign Up</strong> page to create a user</p>
    </div>

    <div class="mb-2">
        <button class="btn btn-primary btn-sm" @onclick="SignUpPage">Sign Up</button>
        <button class="btn btn-secondary btn-sm" @onclick="GoBack">Back</button>
    </div>
</div>

@code {
    private bool isLoggedIn = false;
    private bool isOrganizer = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if user is logged in
            isLoggedIn = await _accessService.IsUserLoggedInAsync();
            // Check if user is an organizer
            isOrganizer = await _accessService.IsOrganizerAsync();
            //Allow only organizer to view the page - redirect elsewhere otherwise
            RoleBasedRedirector.CheckOrganizerAccess(isLoggedIn, isOrganizer, _navigationManager);
        }
        catch
        {
            // In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    private void SignUpPage()
    {
        _navigationManager.NavigateTo("/auth/signup");
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/users");
    }
}   