@page "/auth/login"
@using CleanUps.MAUI.Shared.Services;
@using CleanUps.MAUI.Shared.Services.Interfaces;
@using CleanUps.Shared.DTOs.Users;
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json
@inject UserApiService _userApiService
@inject IAccessService _accessService
@inject NavigationManager _navigationManager

<div class="card shadow p-4">
    <h3>Login</h3>

    <EditForm Model="loginModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="office@zerowastemontenegro.me" />
        </div>

        <div class="form-group mb-2">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
        </div>

        <div class="mb-2">
            <button type="submit" class="btn btn-primary btn-sm">Login</button>
            <button type="button" class="btn btn-dark btn-sm" @onclick="Cancel">Cancel</button>
        </div>

        <div class="mb-2">
            <a href="/auth/signup">Don't have an account? Sign up</a>
        </div>
    </EditForm>
</div>

@if (!string.IsNullOrEmpty(errorMsg))
{
    <p class="text-danger">@errorMsg</p>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private string errorMsg = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // If user is already logged in, redirect to home
        if (await _accessService.IsUserLoggedInAsync())
        {
            _navigationManager.NavigateTo("/");
        }
    }

    private async Task HandleSubmit()
    {
        // Create login request from model
        LoginRequest request = new LoginRequest(loginModel.Email, loginModel.Password);

        // Attempt to login
        var result = await _userApiService.LoginAsync(request);

        if (result.IsSuccess)
        {
            if (result.Data is LoginResponse loginResponse)
            {
                UserSessionInfo userSession = new UserSessionInfo
                    {
                        UserId = loginResponse.UserId,
                        Name = loginResponse.Name,
                        Email = loginResponse.Email,
                        Role = loginResponse.Role
                    };

                await _accessService.SetUserSessionAsync(userSession);
                _navigationManager.NavigateTo("/events", forceLoad: false);
            }
            else
            {
                // If we get here, the signup worked but the auto-login did not
                _navigationManager.NavigateTo("/auth/login");
            }
        }
        else
        {
            errorMsg = result.ErrorMessage ?? "Invalid email or password.";
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/");
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}
