@page "/auth/password-reset"
@using System.ComponentModel.DataAnnotations
@using CleanUps.Shared.DTOs.Auth
@using CleanUps.Shared.ClientServices.Interfaces
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager NavigationManager
@inject IAuthApiService AuthApiService

<div class="card shadow p-4">
    <h3>Password Reset</h3>

    @* Loading indicator *@
    @if (isLoading)
    {
        <div class="alert alert-info my-3" role="alert">
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="ms-2">Loading, please wait…</span>
        </div>
    }

    @* STEP 1: Enter email *@
    @if (currentStep == PasswordResetStep.EnterEmail)
    {
        <EditForm Model="requestModel" OnValidSubmit="HandleRequestReset">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <InputText id="email" class="form-control" @bind-Value="requestModel.Email" />
                <ValidationMessage For="() => requestModel.Email" />
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isLoading">Reset Password</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@isLoading">Cancel</button>
            </div>
        </EditForm>
    }

    @* STEP 2: Enter token *@
    else if (currentStep == PasswordResetStep.EnterToken)
    {
        <div class="alert alert-success my-3" role="alert">
            A reset token has been sent to <strong> @requestModel.Email</strong>. Please check your email.
        </div>

        <EditForm Model="validateModel" OnValidSubmit="HandleVerifyToken">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="token" class="form-label">Reset Token</label>
                <InputText id="token" class="form-control" @bind-Value="validateModel.Token" />
                <ValidationMessage For="() => validateModel.Token" />
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isLoading">Verify Token</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@isLoading">Cancel</button>
            </div>
        </EditForm>
    }

    @* STEP 3: Enter new password *@
    else if (currentStep == PasswordResetStep.EnterNewPassword)
    {
        <EditForm Model="resetModel" OnValidSubmit="HandleResetPassword">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="newPassword" class="form-label">New Password</label>
                <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetModel.NewPassword" />
                <ValidationMessage For="() => resetModel.NewPassword" />
            </div>

            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="resetModel.ConfirmPassword" />
                <ValidationMessage For="() => resetModel.ConfirmPassword" />
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@isLoading">Set New Password</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel" disabled="@isLoading">Cancel</button>
            </div>
        </EditForm>
    }

    @* FINAL: Success message *@
    else if (currentStep == PasswordResetStep.Complete)
    {
        <div class="alert alert-success my-3">Your password has been reset successfully.</div>
        <button class="btn btn-primary" @onclick="GoToLogin">Go to Login</button>
    }
</div>

@code {
    private enum PasswordResetStep { EnterEmail, EnterToken, EnterNewPassword, Complete }
    private PasswordResetStep currentStep = PasswordResetStep.EnterEmail;

    private bool isLoading = false;

    private RequestPasswordResetRequest requestModel = new();
    private ValidateTokenRequest validateModel = new();
    private ResetPasswordRequest resetModel = new();

    private async Task HandleRequestReset()
    {
        isLoading = true;
        try
        {
            var result = await AuthApiService.RequestPasswordResetAsync(requestModel);
            if (result.IsSuccess)
            {
                currentStep = PasswordResetStep.EnterToken;
            }
            else
            {
                // surface API error if needed
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleVerifyToken()
    {
        isLoading = true;
        try
        {
            var result = await AuthApiService.ValidateResetTokenAsync(validateModel);
            if (result.IsSuccess && result.Data)
            {
                resetModel.Token = validateModel.Token;
                currentStep = PasswordResetStep.EnterNewPassword;
            }
            else
            {
                // handle invalid/expired token
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleResetPassword()
    {
        isLoading = true;
        try
        {
            var result = await AuthApiService.ResetPasswordAsync(resetModel);
            if (result.IsSuccess)
            {
                currentStep = PasswordResetStep.Complete;
            }
            else
            {
                // handle error
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void Cancel() => NavigationManager.NavigateTo("/auth/login");
    private void GoToLogin() => NavigationManager.NavigateTo("/auth/login");
}
