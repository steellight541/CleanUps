@page "/auth/password-reset"
@using System.ComponentModel.DataAnnotations
@using CleanUps.Shared.DTOs.Auth
@using CleanUps.Shared.ClientServices.Interfaces
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager NavigationManager
@inject IAuthApiService _authApiService

<div class="card shadow position-relative">
    @* Section: Card Header *@
    <div class="card-header py-3">
        <h3 class="mb-0">Password Reset</h3>
    </div>

    @* Section: Card Body (Workflow Steps) *@
    <div class="card-body p-4">
        @* Display: Generic Loading Indicator *@
        @if (isLoading)
        {
            <div class="alert alert-info my-3" role="alert">
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="ms-2">Loading, please wait…</span>
            </div>
        }

        @* Display: Error Messages *@
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger my-3" role="alert">
                @errorMessage
            </div>
        }

        @* Subsection: STEP 1 - Enter Email Form *@
        @if (currentStep == PasswordResetStep.EnterEmail)
        {
            <EditForm Model="emailPasswordResetPageModel" OnValidSubmit="HandleRequestReset">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="email" class="form-label">Email address</label>
                    <InputText id="email" class="form-control" @bind-Value="emailPasswordResetPageModel.Email" />
                    <ValidationMessage For="() => emailPasswordResetPageModel.Email" />
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">Reset Password</button>
                </div>
            </EditForm>
        }

        @* Subsection: STEP 2 - Enter Token Form *@
        else if (currentStep == PasswordResetStep.EnterToken)
        {
            <div class="alert alert-success my-3" role="alert">
                A reset token has been sent to <strong> @emailPasswordResetPageModel.Email</strong>. Please check your email.
                <br />
                <small class="text-danger">This token will expire in 15 minutes.</small>
            </div>

            <EditForm Model="validateTokenPageModel" OnValidSubmit="HandleVerifyToken">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="token" class="form-label">Reset Token</label>
                    <InputText id="token" class="form-control" @bind-Value="validateTokenPageModel.Token" />
                    <ValidationMessage For="() => validateTokenPageModel.Token" />
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">Verify Token</button>
                </div>
            </EditForm>
        }

        @* Subsection: STEP 3 - Enter New Password Form *@
        else if (currentStep == PasswordResetStep.EnterNewPassword)
        {
            <EditForm Model="resetPasswordPageModel" OnValidSubmit="HandleResetPassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password</label>
                    <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetPasswordPageModel.NewPassword" />
                    <ValidationMessage For="() => resetPasswordPageModel.NewPassword" />
                </div>

                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="resetPasswordPageModel.ConfirmPassword" />
                    <ValidationMessage For="() => resetPasswordPageModel.ConfirmPassword" />
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">Set New Password</button>
                </div>
            </EditForm>
        }

        @* Subsection: STEP 4 FINAL - Success Message *@
        else if (currentStep == PasswordResetStep.Complete)
        {
            <div class="alert alert-success my-3">Your password has been reset successfully.</div>
        }
    </div>

    @* Section: Card Footer (Action Buttons) *@
    <div class="card-footer py-3 d-flex gap-2">
         @* Footer Buttons - Only Cancel and GoToLogin remain here *@
         @if (currentStep == PasswordResetStep.EnterEmail || currentStep == PasswordResetStep.EnterToken || currentStep == PasswordResetStep.EnterNewPassword)
         {
             <button type="button" class="btn btn-dark" @onclick="Cancel" disabled="@isLoading">Cancel</button>
         }
         else if (currentStep == PasswordResetStep.Complete)
         {
             <button class="btn btn-primary" @onclick="GoToLogin">Go to Login</button>
         }
    </div>
</div>

@code {
    /// <summary>
    /// Represents the current stage in the password reset workflow.
    /// The process follows a linear progression through these steps.
    /// </summary>
    private enum PasswordResetStep { EnterEmail = 1, EnterToken = 2, EnterNewPassword = 3, Complete = 4 }
    
    /// <summary>
    /// Tracks the current active step in the password reset workflow.
    /// This property controls which UI elements and forms are displayed to the user.
    /// Initialized to EnterEmail as the first step in the process.
    /// </summary>
    private PasswordResetStep currentStep = PasswordResetStep.EnterEmail;

    /// <summary>
    /// Indicates whether an asynchronous operation is in progress.
    /// Used to show loading indicators and disable form submission buttons
    /// to prevent duplicate submissions during API calls.
    /// </summary>
    private bool isLoading = false; 

    /// <summary>
    /// Contains the data and validation rules for the email input form (step 1).
    /// This model captures the user's email address for initiating the password reset process.
    /// </summary>
    private EmailPasswordResetPageModel emailPasswordResetPageModel = new();

    /// <summary>
    /// Contains the data and validation rules for the token validation form (step 2).
    /// This model captures the security token sent to the user's email for verification.
    /// </summary>
    private ValidateTokenPageModel validateTokenPageModel = new();
    
    /// <summary>
    /// Contains the data and validation rules for the new password form (step 3).
    /// This model captures the new password and confirmation for completing the reset process.
    /// </summary>
    private ResetPasswordPageModel resetPasswordPageModel = new();

    /// <summary>
    /// Stores error messages from API operations or validation failures.
    /// Displayed to the user in an alert box when errors occur during the reset process.
    /// </summary>
    private string? errorMessage = null;

    /// <summary>
    /// Handles the submission of the email address to initiate the password reset process.
    /// Validates the form, calls the API to send a reset token, and advances the UI to the next step.
    /// </summary>
    private async Task HandleRequestReset()
    {
        // Step 1: Clear previous errors and set loading state.
        errorMessage = null; // Clear previous errors
        isLoading = true; // Set loading state
        StateHasChanged(); // Refresh the UI

        try
        {
            // Step 2: Create DTO from page model and call the API
            var emailPWResetRequest = new EmailPasswordResetRequest(emailPasswordResetPageModel.Email);
            var emailPWResetResult = await _authApiService.RequestPasswordResetAsync(emailPWResetRequest);
            
            // Step 3: Process API response.
            if (emailPWResetResult.IsSuccess)
            {
                // Step 4: If successful, move to next step, where user will enter the token.
                currentStep = PasswordResetStep.EnterToken;
            }
            else
            {
                // Step 5: If API call fails, display the error message.
                errorMessage = emailPWResetResult.ErrorMessage ?? "An unknown error occurred while requesting the password reset.";
            }
        }
        catch (Exception ex) // Step 6: Catch unexpected exceptions during the process.
        {
            errorMessage = $"An application error occurred: {ex.Message}";
        }
        finally
        {
            // Step 7: Reset loading state and update UI.
            isLoading = false; // Reset loading state
            StateHasChanged(); // Refresh the UI
        }
    }

    /// <summary>
    /// Handles the submission of the reset token for verification.
    /// Validates the form, calls the API to verify the token, and advances to the password entry step if valid.
    /// </summary>
    private async Task HandleVerifyToken()
    {
        // Step 1: Clear previous errors and set loading state.
        errorMessage = null; // Clear previous errors
        isLoading = true; // Set loading state
        StateHasChanged(); // Refresh the UI

        try
        {
            // Step 2: Create DTO from page model and call the API
            var validateRequest = new ValidateTokenRequest(validateTokenPageModel.Token);
            var validateResult = await _authApiService.ValidateResetTokenAsync(validateRequest);

            // Step 3: Process API response.
            if (validateResult.IsSuccess && validateResult.Data)
            {
                // Step 4: If token is valid, store it and move to next step, where user will enter the new password.
                resetPasswordPageModel.Token = validateTokenPageModel.Token; 
                currentStep = PasswordResetStep.EnterNewPassword;
            }
            else
            {
                // Step 5: If token is invalid or API call fails, display the error message.
                errorMessage = validateResult.ErrorMessage ?? "The provided token is invalid or has expired.";
            }
        }
        catch (Exception ex) // Step 6: Catch unexpected exceptions during the process.
        {
            errorMessage = $"An application error occurred: {ex.Message}";
        }
        finally
        {
            // Step 7: Reset loading state and update UI.
            isLoading = false; // Reset loading state   
            StateHasChanged(); // Refresh the UI
        }
    }

    /// <summary>
    /// Handles the submission of the new password and confirmation.
    /// Validates the form, calls the API to set the new password using the verified token, 
    /// and shows a completion message or error.
    /// </summary>
    private async Task HandleResetPassword()
    {
        // Step 1: Clear previous errors and set loading state.
        errorMessage = null; // Clear previous errors
        isLoading = true; // Set loading state
        StateHasChanged(); // Refresh the UI

        try
        {
            // Step 2: Create DTO from page model and call the API
            var actualResetPasswordRequest = new ResetPasswordRequest(resetPasswordPageModel.Token, resetPasswordPageModel.NewPassword, resetPasswordPageModel.ConfirmPassword);
            
            var resetPasswordResult = await _authApiService.ResetPasswordAsync(actualResetPasswordRequest);

            // Step 3: Process API response.
            if (resetPasswordResult.IsSuccess)
            {
                // Step 4: If successful, move to next step, where user will see a success message and a button to go to login page.
                currentStep = PasswordResetStep.Complete;
            }
            else
            {
                // Step 5: If API call fails, display the error message.
                errorMessage = resetPasswordResult.ErrorMessage ?? "An unknown error occurred while resetting the password.";
            }
        }
        catch (Exception ex) // Step 6: Catch unexpected exceptions during the process.
        {
            errorMessage = $"An application error occurred: {ex.Message}";
        }
        finally
        {
            // Step 7: Reset loading state and update UI.
            isLoading = false; // Reset loading state
            StateHasChanged(); // Refresh the UI
        }
    }

    /// <summary>
    /// Navigates the user back to the login page.
    /// </summary>
    private void Cancel() 
    {
        // Step 1: Navigate to login page.
        NavigationManager.NavigateTo("/auth/login");
    }
    
    /// <summary>
    /// Navigates the user to the login page after successful password reset.
    /// </summary>
    private void GoToLogin() 
    {
        // Step 1: Navigate to login page.
        NavigationManager.NavigateTo("/auth/login");
    }

    /// <summary>
    /// Model class for the request password reset form with validation attributes.
    /// This class captures and validates the user's email address for the first step
    /// of the password reset process.
    /// </summary>
    private class EmailPasswordResetPageModel
    {
        /// <summary>
        /// Gets or sets the email address where the password reset token will be sent.
        /// This must be a valid email format and must correspond to an existing user account.
        /// </summary>
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address.")]
        public string Email { get; set; } = string.Empty;
    }

    /// <summary>
    /// Model class for the token validation form with validation attributes.
    /// This class captures and validates the security token sent to the user's email
    /// during the second step of the password reset process.
    /// </summary>
    private class ValidateTokenPageModel
    {
        /// <summary>
        /// Gets or sets the security token received via email.
        /// This token is time-limited (typically 15 minutes) and must match
        /// what was generated on the server for the user's account.
        /// </summary>
        [Required(ErrorMessage = "Token is required.")]
        public string Token { get; set; } = string.Empty;
    }

    /// <summary>
    /// Model class for the password reset form with validation attributes.
    /// This class captures and validates the new password and confirmation
    /// during the final step of the password reset process.
    /// </summary>
    private class ResetPasswordPageModel
    {
        /// <summary>
        /// Gets or sets the validated security token from the previous step.
        /// This token is not displayed in the UI but is stored from the token validation step
        /// and sent along with the new password to authenticate the reset request.
        /// </summary>
        public string Token { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the user's desired new password.
        /// Must meet length requirements (8-50 characters) and will replace
        /// the user's current password after successful validation.
        /// </summary>
        [Required(ErrorMessage = "New password is required.")]
        [StringLength(50, MinimumLength = 8, ErrorMessage = "Password must be between 8 and 50 characters.")]
        public string NewPassword { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the confirmation of the new password.
        /// Must exactly match the NewPassword property to ensure the user
        /// hasn't made a typing error when entering their new password.
        /// </summary>
        [Required(ErrorMessage = "Password confirmation is required.")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}

