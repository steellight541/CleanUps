@page "/auth/password-reset"
@using System.ComponentModel.DataAnnotations
@using CleanUps.Shared.DTOs.Auth
@using CleanUps.Shared.ClientServices.Interfaces
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager _navigationManager
@inject IAuthApiService _authApiService

<div class="card shadow p-4">
    <h3>Password Reset</h3>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") my-2" role="alert">
            @statusMessage
        </div>
    }

    @if (currentStep == ResetStep.EnterEmail)
    {
        <EditForm Model="requestModel" OnValidSubmit="HandleRequestReset">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="email" class="form-label">Enter your account email:</label>
                <InputText id="email" class="form-control" @bind-Value="requestModel.Email" />
                <ValidationMessage For="() => requestModel.Email" />
            </div>
            <button type="submit" class="btn btn-primary" disabled="isLoading">@(isLoading ? "Sending..." : "Request Reset")</button>
        </EditForm>
    }
    else if (currentStep == ResetStep.EnterToken)
    {
        <EditForm Model="validateModel" OnValidSubmit="HandleValidateToken">
            <DataAnnotationsValidator />
            <p>A reset token has been sent to your email (check logs for simulation). Please enter it below.</p>
            <div class="mb-3">
                <label for="token" class="form-label">Reset Token:</label>
                <InputText id="token" class="form-control" @bind-Value="validateModel.Token" />
                <ValidationMessage For="() => validateModel.Token" />
            </div>
            <button type="submit" class="btn btn-primary" disabled="isLoading">@(isLoading ? "Validating..." : "Validate Token")</button>
        </EditForm>
        <button class="btn btn-link" @onclick="() => currentStep = ResetStep.EnterEmail">Request another token?</button>
    }
    else if (currentStep == ResetStep.EnterNewPassword)
    {
        <EditForm Model="resetModel" OnValidSubmit="HandleResetPassword">
            <DataAnnotationsValidator />
            <p>Token validated. Enter your new password below.</p>
            <div class="mb-3">
                <label for="newPassword" class="form-label">New Password:</label>
                <InputText type="password" id="newPassword" class="form-control" @bind-Value="resetModel.NewPassword" />
                <ValidationMessage For="() => resetModel.NewPassword" />
            </div>
            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirm New Password:</label>
                <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="resetModel.ConfirmPassword" />
                <ValidationMessage For="() => resetModel.ConfirmPassword" />
            </div>
            <button type="submit" class="btn btn-success" disabled="isLoading">@(isLoading ? "Resetting..." : "Reset Password")</button>
        </EditForm>
    }
    else if (currentStep == ResetStep.Complete)
    {
        <p>Your password has been successfully reset.</p>
        <button class="btn btn-primary" @onclick="GoToLogin">Go to Login</button>
    }

    <div class="mt-3">
        <button class="btn btn-secondary btn-sm" @onclick="GoBack">Back to Login</button>
    </div>
</div>

@code {
    /// <summary>
    /// Enum representing the different steps of the password reset process.
    /// </summary>
    private enum ResetStep { EnterEmail, EnterToken, EnterNewPassword, Complete }
    
    private ResetStep currentStep = ResetStep.EnterEmail;

    private RequestPasswordResetRequest requestModel = new();
    private ValidateTokenRequest validateModel = new();
    private ResetPasswordRequest resetModel = new();

    private string statusMessage = string.Empty;
    private bool isSuccess = false;
    private bool isLoading = false;
    private string validatedToken = string.Empty;

    private async Task HandleRequestReset()
    {
        // Step 1: Update UI to show loading state
        isLoading = true;
        isSuccess = false;
        statusMessage = string.Empty;
        StateHasChanged();

        // Step 2: Call API service to request password reset
        var result = await _authApiService.RequestPasswordResetAsync(requestModel);
        
        // Step 3: Process the API response
        if (result.IsSuccess)
        {
            // Step 4: On success, update status and move to token entry step
            statusMessage = result.Data ?? "Password reset request sent (check simulation logs).";
            isSuccess = true;
            currentStep = ResetStep.EnterToken;
        }
        else
        {
            // Step 5: On failure, display error message
            statusMessage = result.ErrorMessage ?? "Failed to request password reset.";
        }

        // Step 6: Update UI to show completed state
        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleValidateToken()
    {
        // Step 1: Update UI to show loading state
        isLoading = true;
        isSuccess = false;
        statusMessage = string.Empty;
        StateHasChanged();

        // Step 2: Call API service to validate the reset token
        var result = await _authApiService.ValidateResetTokenAsync(validateModel);
        
        // Step 3: Process the API response
        if (result.IsSuccess)
        {
            // Step 4: On success, update status, store token, and move to password entry step
            statusMessage = "Token validated successfully.";
            isSuccess = true;
            validatedToken = validateModel.Token;
            resetModel.Token = validatedToken;
            currentStep = ResetStep.EnterNewPassword;
        }
        else
        {
            // Step 5: On failure, display error message
            statusMessage = result.ErrorMessage ?? "Failed to validate token.";
        }

        // Step 6: Update UI to show completed state
        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleResetPassword()
    {
        // Step 1: Update UI to show loading state
        isLoading = true;
        isSuccess = false;
        statusMessage = string.Empty;
        StateHasChanged();

        // Step 2: Ensure the validated token is used for the reset
        resetModel.Token = validatedToken;

        // Step 3: Call API service to reset the password
        var result = await _authApiService.ResetPasswordAsync(resetModel);
        
        // Step 4: Process the API response
        if (result.IsSuccess)
        {
            // Step 5: On success, update status and move to completion step
            statusMessage = result.Data ?? "Password successfully reset.";
            isSuccess = true;
            currentStep = ResetStep.Complete;
        }
        else
        {
            // Step 6: On failure, display error message
            statusMessage = result.ErrorMessage ?? "Failed to reset password.";
        }

        // Step 7: Update UI to show completed state
        isLoading = false;
        StateHasChanged();
    }

    private void GoBack()
    {
        // Step 1: Navigate back to the login page
        _navigationManager.NavigateTo("/auth/login");
    }

    private void GoToLogin()
    {
        // Step 1: Navigate to the login page (used after successful password reset)
        _navigationManager.NavigateTo("/auth/login");
    }
}
