@page "/auth/password-reset"
@using System.ComponentModel.DataAnnotations
@using CleanUps.Shared.DTOs.Auth
@using CleanUps.Shared.ClientServices.Interfaces
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager NavigationManager
@inject IAuthApiService AuthApiService

<div class="card shadow p-4">
  <h3>Password Reset</h3>

  @* STEP 1: Enter email *@
  @if (currentStep == ResetStep.EnterEmail)
  {
    <EditForm Model="requestModel" OnValidSubmit="HandleRequestReset">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <InputText id="email" class="form-control" @bind-Value="requestModel.Email" />
        <ValidationMessage For="() => requestModel.Email" />
      </div>

      <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">Reset Password</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
      </div>
    </EditForm>
  }
  
  @* STEP 2: Enter token *@
  else if (currentStep == ResetStep.EnterToken)
  {
    <EditForm Model="validateModel" OnValidSubmit="HandleVerifyToken">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <div class="mb-3">
        <label for="token" class="form-label">Reset Token</label>
        <InputText id="token" class="form-control" @bind-Value="validateModel.Token" />
        <ValidationMessage For="() => validateModel.Token" />
      </div>

      <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">Verify Token</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
      </div>
    </EditForm>
  }

  @* STEP 3: Enter new password *@
  else if (currentStep == ResetStep.EnterNewPassword)
  {
    <EditForm Model="resetModel" OnValidSubmit="HandleResetPassword">
      <DataAnnotationsValidator />
      <ValidationSummary />

      <div class="mb-3">
        <label for="newPassword" class="form-label">New Password</label>
        <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetModel.NewPassword" />
        <ValidationMessage For="() => resetModel.NewPassword" />
      </div>

      <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="resetModel.ConfirmPassword" />
        <ValidationMessage For="() => resetModel.ConfirmPassword" />
      </div>

      <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">Set New Password</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
      </div>
    </EditForm>
  }

  @* FINAL: Success message *@
  else if (currentStep == ResetStep.Complete)
  {
    <div class="alert alert-success">Your password has been reset successfully.</div>
    <button class="btn btn-primary" @onclick="GoToLogin">Go to Login</button>
  }
</div>

@code {
  private enum ResetStep { EnterEmail, EnterToken, EnterNewPassword, Complete }
  private ResetStep currentStep = ResetStep.EnterEmail;

  // These DTOs have your [EmailAddress], [Required], [Compare] attributes in your shared project
  private RequestPasswordResetRequest requestModel = new();
  private ValidateTokenRequest validateModel = new();
  private ResetPasswordRequest resetModel = new();

  private async Task HandleRequestReset()
  {
    var result = await AuthApiService.RequestPasswordResetAsync(requestModel);
    if (result.IsSuccess)
    {
      currentStep = ResetStep.EnterToken;
    }
    else
    {
      // you can surface API errors here if you like, e.g. via a statusMessage
    }
  }

  private async Task HandleVerifyToken()
  {
    var result = await AuthApiService.ValidateResetTokenAsync(validateModel);
    if (result.IsSuccess && result.Data)
    {
      resetModel.Token = validateModel.Token;
      currentStep = ResetStep.EnterNewPassword;
    }
    else
    {
      // handle invalid/expired token
    }
  }

  private async Task HandleResetPassword()
  {
    var result = await AuthApiService.ResetPasswordAsync(resetModel);
    if (result.IsSuccess)
    {
      currentStep = ResetStep.Complete;
    }
    else
    {
      // handle reset failure
    }
  }

  private void Cancel()    => NavigationManager.NavigateTo("/auth/login");
  private void GoToLogin() => NavigationManager.NavigateTo("/auth/login");
}
