@page "/auth/password-reset"
@using System.ComponentModel.DataAnnotations
@using CleanUps.Shared.DTOs.Auth
@using CleanUps.Shared.ClientServices.Interfaces
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager NavigationManager
@inject IAuthApiService AuthApiService

<div class="card shadow position-relative">
    <div class="card-header py-3">
        <h3 class="mb-0">Password Reset</h3>
    </div>

    <div class="card-body p-4">
        @* Display Generic Loading Indicator *@
        @if (isLoading)
        {
            <div class="alert alert-info my-3" role="alert">
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <span class="ms-2">Loading, please wait…</span>
            </div>
        }

        @* Display Error Messages *@
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger my-3" role="alert">
                @errorMessage
            </div>
        }

        @* STEP 1: Enter email *@
        @if (currentStep == PasswordResetStep.EnterEmail)
        {
            <EditForm Model="requestModel" OnValidSubmit="HandleRequestReset">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="email" class="form-label">Email address</label>
                    <InputText id="email" class="form-control" @bind-Value="requestModel.Email" />
                    <ValidationMessage For="() => requestModel.Email" />
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">Reset Password</button>
                </div>
            </EditForm>
        }

        @* STEP 2: Enter token *@
        else if (currentStep == PasswordResetStep.EnterToken)
        {
            <div class="alert alert-success my-3" role="alert">
                A reset token has been sent to <strong> @requestModel.Email</strong>. Please check your email.
                <br />
                <small class="text-danger">This token will expire in 15 minutes.</small>
            </div>

            <EditForm Model="validateModel" OnValidSubmit="HandleVerifyToken">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="token" class="form-label">Reset Token</label>
                    <InputText id="token" class="form-control" @bind-Value="validateModel.Token" />
                    <ValidationMessage For="() => validateModel.Token" />
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">Verify Token</button>
                </div>
            </EditForm>
        }

        @* STEP 3: Enter new password *@
        else if (currentStep == PasswordResetStep.EnterNewPassword)
        {
            <EditForm Model="resetModel" OnValidSubmit="HandleResetPassword">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password</label>
                    <InputText id="newPassword" type="password" class="form-control" @bind-Value="resetModel.NewPassword" />
                    <ValidationMessage For="() => resetModel.NewPassword" />
                </div>

                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="resetModel.ConfirmPassword" />
                    <ValidationMessage For="() => resetModel.ConfirmPassword" />
                </div>
                
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">Set New Password</button>
                </div>
            </EditForm>
        }

        @* FINAL: Success message *@
        else if (currentStep == PasswordResetStep.Complete)
        {
            <div class="alert alert-success my-3">Your password has been reset successfully.</div>
        }
    </div>

    <div class="card-footer py-3 d-flex gap-2">
         @* Footer Buttons - Only Cancel and GoToLogin remain here *@
         @if (currentStep == PasswordResetStep.EnterEmail || currentStep == PasswordResetStep.EnterToken || currentStep == PasswordResetStep.EnterNewPassword)
         {
             <button type="button" class="btn btn-dark" @onclick="Cancel" disabled="@isLoading">Cancel</button>
         }
         else if (currentStep == PasswordResetStep.Complete)
         {
             <button class="btn btn-primary" @onclick="GoToLogin">Go to Login</button>
         }
    </div>
</div>

@code {
    /// <summary>
    /// Represents the current stage in the password reset workflow.
    /// </summary>
    private enum PasswordResetStep { EnterEmail, EnterToken, EnterNewPassword, Complete }
    private PasswordResetStep currentStep = PasswordResetStep.EnterEmail;

    private bool isLoading = false;

    // --- DTO Models for Forms ---
    private RequestPasswordResetRequest requestModel = new();
    private ValidateTokenRequest validateModel = new();
    private ResetPasswordRequest resetModel = new();

    // --- State for UI feedback ---
    private string? errorMessage = null; // To store and display API errors

    /// <summary>
    /// Handles the submission of the email address to initiate the password reset process.
    /// Validates the form, calls the API to send a reset token, and advances the UI to the next step.
    /// </summary>
    private async Task HandleRequestReset()
    {
        // Step 1: Clear previous errors and set loading state.
        errorMessage = null; 
        isLoading = true;
        StateHasChanged();

        try
        {
            // Step 2: Call the API service to request the password reset token.
            var result = await AuthApiService.RequestPasswordResetAsync(requestModel);
            
            // Step 3: Process API response.
            if (result.IsSuccess)
            {
                // Step 4: If successful, move to next step, where user will enter the token.
                currentStep = PasswordResetStep.EnterToken;
            }
            else
            {
                // Step 5: If API call fails, display the error message.
                errorMessage = result.ErrorMessage ?? "An unknown error occurred while requesting the password reset.";
            }
        }
        catch (Exception ex) // Step 6: Catch unexpected exceptions during the process.
        {
            errorMessage = $"An application error occurred: {ex.Message}";
        }
        finally
        {
            // Step 7: Reset loading state and update UI.
            isLoading = false;
            StateHasChanged(); 
        }
    }

    /// <summary>
    /// Handles the submission of the reset token for verification.
    /// Validates the form, calls the API to verify the token, and advances to the password entry step if valid.
    /// </summary>
    private async Task HandleVerifyToken()
    {
        // Step 1: Clear previous errors and set loading state.
        errorMessage = null; 
        isLoading = true;
        StateHasChanged();

        try
        {
            // Step 2: Call the API service to validate the entered token.
            var result = await AuthApiService.ValidateResetTokenAsync(validateModel);

            // Step 3: Process API response.
            if (result.IsSuccess && result.Data)
            {
                // Step 4: If token is valid, store it and move to next step, where user will enter the new password.
                resetModel.Token = validateModel.Token; 
                currentStep = PasswordResetStep.EnterNewPassword;
            }
            else
            {
                // Step 5: If token is invalid or API call fails, display the error message.
                errorMessage = result.ErrorMessage ?? "The provided token is invalid or has expired.";
            }
        }
        catch (Exception ex) // Step 6: Catch unexpected exceptions during the process.
        {
            errorMessage = $"An application error occurred: {ex.Message}";
        }
        finally
        {
            // Step 7: Reset loading state and update UI.
            isLoading = false;
            StateHasChanged(); 
        }
    }

    /// <summary>
    /// Handles the submission of the new password and confirmation.
    /// Validates the form, calls the API to set the new password using the verified token, 
    /// and shows a completion message or error.
    /// </summary>
    private async Task HandleResetPassword()
    {
        // Step 1: Clear previous errors and set loading state.
        errorMessage = null; 
        isLoading = true;
        StateHasChanged();

        // Note: Property resetModel.Token should have been set in HandleVerifyToken method.
        // Input validation (required fields, password match) is handled by EditForm + DataAnnotations.

        try
        {
            // Step 2: Call the API service to reset the password.
            var result = await AuthApiService.ResetPasswordAsync(resetModel);

            // Step 3: Process API response.
            if (result.IsSuccess)
            {
                // Step 4: If successful, move to next step, where user will see a success message and a button to go to login page.
                currentStep = PasswordResetStep.Complete;
            }
            else
            {
                // Step 5: If API call fails, display the error message.
                errorMessage = result.ErrorMessage ?? "An unknown error occurred while resetting the password.";
            }
        }
        catch (Exception ex) // Step 6: Catch unexpected exceptions during the process.
        {
            errorMessage = $"An application error occurred: {ex.Message}";
        }
        finally
        {
            // Step 7: Reset loading state and update UI.
            isLoading = false;
            StateHasChanged(); 
        }
    }

    /// <summary>
    /// Navigates the user back to the login page.
    /// </summary>
    private void Cancel() 
    {
        // Step 1: Navigate to login page.
        NavigationManager.NavigateTo("/auth/login");
    }
    
    /// <summary>
    /// Navigates the user to the login page after successful password reset.
    /// </summary>
    private void GoToLogin() 
    {
        // Step 1: Navigate to login page.
        NavigationManager.NavigateTo("/auth/login");
    }

    /// <summary>
    /// Helper to get a unique form ID for footer button association.
    /// </summary>
    private string GetFormId(PasswordResetStep step)
    {
        return $"form-{step}"; // Simple ID based on step
    }
}

