@page "/auth/signup"
@using CleanUps.MAUI.Shared.Services;
@using CleanUps.MAUI.Shared.Services.Interfaces;
@using CleanUps.Shared.DTOs.Users;
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@inject UserApiService _userApiService;
@inject IAccessService _accessService;
@inject NavigationManager _navigationManager

<div class="card shadow p-4">

    <h3>Sign Up</h3>

    <EditForm Model="singUpModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="singUpModel.Name" class="form-control" placeholder="Mirza Džaferadžović" />
        </div>

        <div class="form-group mb-2">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="singUpModel.Email" class="form-control" placeholder="office@zerowastemontenegro.me" />
        </div>

        <div class="form-group mb-2">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="singUpModel.Password" class="form-control" aria-describedby="passwordHelpBlock" />
            <div id="passwordHelpBlock" class="form-text">
                Your password must be 8-50 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.
            </div>
        </div>

        <div class="form-group mb-2">
            <label for="confirmPassword">Confirm Password</label>
            <InputText id="confirmPassword" type="password" @bind-Value="singUpModel.ConfirmPassword" class="form-control" />
        </div>

        <div class="mb-2">
            <button type="submit" class="btn btn-primary btn-sm">Sign Up</button>
            <button type="button" class="btn btn-dark btn-sm" @onclick="Cancel">Cancel</button>
        </div>

        <div class="mb-2">
            <a href="/auth/login">Already have an account? Log in</a>
        </div>
    </EditForm>
</div>
@if (!string.IsNullOrEmpty(errorMsg))
{
    <p class="text-danger">@errorMsg</p>
}

@code {
    private SignUpModel singUpModel = new SignUpModel();
    private string errorMsg = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // If user is already logged in, redirect to home
        if (await _accessService.IsUserLoggedInAsync())
        {
            _navigationManager.NavigateTo("/");
        }
    }

    private async Task HandleSubmit()
    {
        CreateUserRequest newUser = new CreateUserRequest(singUpModel.Name, singUpModel.Email, singUpModel.Password);

        var result = await _userApiService.CreateUserAsync(newUser);
        if (result.IsSuccess)
        {
            try
            {
                // The API now automatically logs in the user after signup
                // We need to extract the authentication info from the response
                // Since the result from CreateUserAsync could be a complex object from auto-login
                var jsonContent = result.Data.ToString();
                if (!string.IsNullOrEmpty(jsonContent))
                {
                    try
                    {
                        // Try to deserialize as JsonElement to get Auth information
                        var responseDoc = JsonDocument.Parse(jsonContent);
                        var root = responseDoc.RootElement;
                        
                        if (root.TryGetProperty("Auth", out var authElement))
                        {
                            // Create user session from Auth property
                            var userSession = new UserSessionInfo
                            {
                                UserId = authElement.GetProperty("UserId").GetInt32(),
                                Name = authElement.GetProperty("Name").GetString() ?? string.Empty,
                                Email = authElement.GetProperty("Email").GetString() ?? string.Empty,
                                Role = (CleanUps.Shared.DTOs.Enums.RoleDTO)authElement.GetProperty("Role").GetInt32()
                            };
                            
                            // Save the session
                            await _accessService.SetUserSessionAsync(userSession);
                            
                            // Redirect to home
                            _navigationManager.NavigateTo("/", forceLoad: false);
                            return;
                        }
                    }
                    catch
                    {
                        // Fallback if auto-login data extraction fails
                        // Try to use the UserResponse directly if it's available
                        if (result.Data is UserResponse userResponse)
                        {
                            var userSession = new UserSessionInfo
                            {
                                UserId = userResponse.UserId,
                                Name = userResponse.Name,
                                Email = userResponse.Email,
                                Role = userResponse.Role
                            };
                            
                            await _accessService.SetUserSessionAsync(userSession);
                            _navigationManager.NavigateTo("/", forceLoad: false);
                            return;
                        }
                    }
                }
            }
            catch
            {
                // Fallback if any auto-login attempt fails
                _navigationManager.NavigateTo("/auth/login");
                return;
            }
            
            // If we get here, the signup worked but the auto-login did not
            _navigationManager.NavigateTo("/auth/login");
        }
        else
        {
            errorMsg = result.ErrorMessage ?? "An error occurred while signing up.";
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/");
    }

    private class SignUpModel
    {
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(100, ErrorMessage = "Name cannot exceed 100 characters.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email format.")]
        [StringLength(255, ErrorMessage = "Email cannot exceed 255 characters.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(50, MinimumLength = 8, ErrorMessage = "Password must be between 8 and 50 characters.")]
        public string Password { get; set; }

        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
}
