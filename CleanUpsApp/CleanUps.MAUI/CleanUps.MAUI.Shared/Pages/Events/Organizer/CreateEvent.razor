@page "/events/create"

@inject NavigationManager _navigationManager
@inject IEventApiService _eventApiService
@inject IAccessService _accessService


<div class="card shadow p-4">
    <h3>Create New Event</h3>

    <EditForm Model="eventCreateModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="eventCreateModel.Title" class="form-control" />
        </div>

        <div class="form-group mb-2">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="eventCreateModel.Description" class="form-control" />
        </div>

        <div class="form-group mb-2">
            <label for="startTime">Start Time of Event</label>
            <InputDate id="startTime" @bind-Value="eventCreateModel.StartTime" class="form-control" />
        </div>

        <div class="form-group mb-2">
            <label for="endTime">End Time of Event</label>
            <InputDate id="endTime" @bind-Value="eventCreateModel.EndTime" class="form-control" />
        </div>

        <div class="form-check mb-2">
            <InputCheckbox id="familyFriendly" @bind-Value="eventCreateModel.FamilyFriendly" class="form-check-input" />
            <label class="form-check-label" for="familyFriendly">Family Friendly</label>
        </div>

        <div class="mb-2">
            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
        </div>

    </EditForm>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private EventCreateModel eventCreateModel = new EventCreateModel();
    private string errorMessage;
    private bool isLoggedIn = false;
    private bool isOrganizer = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is an organizer
        try
        {
            // Check if user is logged in
            isLoggedIn = await _accessService.IsUserLoggedInAsync();

            // Check if user is an organizer
            isOrganizer = await _accessService.IsOrganizerAsync();

            //Allow only organizer to view the page - redirect elsewhere otherwise
            RoleBasedRedirector.CheckOrganizerAccess(isLoggedIn, isOrganizer, _navigationManager);
        }
        catch
        {
            // In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    private async Task HandleSubmit()
    {
        CreateEventRequest newEvent = new CreateEventRequest(
            eventCreateModel.Title,
            eventCreateModel.Description,
            eventCreateModel.StartTime,
            eventCreateModel.EndTime,
            eventCreateModel.FamilyFriendly,
            new CreateLocationRequest(eventCreateModel.Longitude, eventCreateModel.Latitude)
    );

        var createResult = await _eventApiService.CreateAsync(newEvent);
        if (createResult.IsSuccess)
        {
            _navigationManager.NavigateTo("/events");
        }
        else
        {
            //If creating was not successful, set the errorMessage from the createResult. If the createResult is empty then set the errorMessage to be the written below
            errorMessage = createResult.ErrorMessage ?? "An error occurred while creating the event.";
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/events");
    }

    private class EventCreateModel
    {
        [Required(ErrorMessage = "Title is required.")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Description is required.")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Start time is required.")]
        public DateTime StartTime { get; set; } = DateTime.Now; // Default now

        [Required(ErrorMessage = "End time is required.")]
        public DateTime EndTime { get; set; } = DateTime.Now.AddHours(2); // Default in 2 hours

        public bool FamilyFriendly { get; set; } // Default is false

        // Default set to 50 temporarily - needs proper input later (address etc)
        [Required(ErrorMessage = "Longitude is required.")]
        [Range(-180.0, 180.0, ErrorMessage = "Longitude must be between -180 and 180.")]
        public decimal Longitude { get; set; } = 50;

        // Default set to 50 temporarily - needs proper input later (address etc)
        [Required(ErrorMessage = "Latitude is required.")]
        [Range(-90.0, 90.0, ErrorMessage = "Latitude must be between -90 and 90.")]
        public decimal Latitude { get; set; } = 50;
    }
}