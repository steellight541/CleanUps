@page "/events/{eventId:int}/edit"

@inject NavigationManager _navigationManager
@inject IEventApiService _eventApiService
@inject IAccessService _accessService

<div class="card shadow p-4">
    <h3>Edit Event</h3>

    @if (eventResult == null)
    {
        <p>Loading...</p>
    }
    else if (eventResult.IsSuccess && eventResult.Data != null)
    {
        <EditForm Model="eventEditModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-2">
                <label for="title">Title</label>
                <InputText id="title" @bind-Value="eventEditModel.Title" class="form-control" />
            </div>

            <div class="form-group mb-2">
                <label for="description">Description</label>
                <InputText id="description" @bind-Value="eventEditModel.Description" class="form-control" />
            </div>

            <div class="form-group mb-2">
                <label for="startTime">Start Time of Event</label>
                <InputDate id="startTime" @bind-Value="eventEditModel.StartTime" class="form-control" />
            </div>

            <div class="form-group mb-2">
                <label for="endTime">End Time of Event</label>
                <InputDate id="endTime" @bind-Value="eventEditModel.EndTime" class="form-control" />
            </div>

            <div class="form-check mb-2">
                <InputCheckbox id="familyFriendly" @bind-Value="eventEditModel.FamilyFriendly" class="form-check-input" />
                <label class="form-check-label" for="familyFriendly">Family Friendly</label>
            </div>

            <!-- Only show status change if the event's status is not Completed -->
            @if (eventResult.Data.Status != StatusDTO.Completed)
            {
                <div class="form-group mb-2">
                    <label for="status">Event Status</label>
                    <InputSelect id="status" @bind-Value="eventEditModel.Status" class="form-control">
                        @foreach (var status in Enum.GetValues(typeof(StatusDTO)))
                        {
                            <option value="@status">@status</option>
                        }
                    </InputSelect>
                </div>
            }

            <div class="mb-2">
                <button type="submit" class="btn btn-primary">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>

        </EditForm>
    }
    else
    {
        <p class="text-danger">Error: @eventResult.ErrorMessage</p>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}


@code {
    [Parameter]
    public int eventId { get; set; }

    private Result<EventResponse> eventResult;
    private EventEditModel eventEditModel = new EventEditModel();
    private string errorMessage;

    private bool isLoggedIn = false;
    private bool isOrganizer = false;

    /// <summary>
    /// Initializes the component and checks user permissions.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        // Step 1: Check if user is an organizer
        try
        {
            // Step 2: Check if user is logged in
            isLoggedIn = await _accessService.IsUserLoggedInAsync();
            
            // Step 3: Check if user is an organizer
            isOrganizer = await _accessService.IsOrganizerAsync();
            
            // Step 4: Allow only organizer to view the page - redirect elsewhere otherwise
            RoleBasedRedirector.CheckOrganizerAccess(isLoggedIn, isOrganizer, _navigationManager);

            // Step 5: Load event data after access check
            await LoadEvent();
        }
        catch
        {
            // Step 6: In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    /// <summary>
    /// Loads the event data from the API service and populates the edit model.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task LoadEvent()
    {
        // Step 1: Call the API to get the event by its ID
        eventResult = await _eventApiService.GetByIdAsync(eventId);

        // Step 2: Check if the operation was successful and data was returned
        if (eventResult.IsSuccess && eventResult.Data != null)
        {
            // Step 3: Populate the edit model with the event data
            eventEditModel.Title = eventResult.Data.Title;
            eventEditModel.Description = eventResult.Data.Description;
            eventEditModel.StartTime = eventResult.Data.StartTime;
            eventEditModel.EndTime = eventResult.Data.EndTime;
            eventEditModel.FamilyFriendly = eventResult.Data.FamilyFriendly;
            eventEditModel.Status = eventResult.Data.Status;
            eventEditModel.TrashCollected = eventResult.Data.TrashCollected;
        }
    }

    /// <summary>
    /// Handles the form submission to update the event.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task HandleSubmit()
    {
        // Step 1: Create an update event request from the form data
        UpdateEventRequest updateEvent = new UpdateEventRequest(
            eventId,
            eventEditModel.Title,
            eventEditModel.Description,
            eventEditModel.StartTime,
            eventEditModel.EndTime,
            eventEditModel.FamilyFriendly,
            eventEditModel.TrashCollected,
            eventEditModel.Status,
            new UpdateLocationRequest(0, 0, 0)
        );

        // Step 2: Call the API service to update the event
        var updateResult = await _eventApiService.UpdateAsync(updateEvent);
        
        // Step 3: Check if the operation was successful
        if (updateResult.IsSuccess)
        {
            // Step 4: If successful, navigate to the events list page
            _navigationManager.NavigateTo("/events");
        }
        else
        {
            // Step 5: If not successful, set the error message from the result
            errorMessage = updateResult.ErrorMessage ?? "An error occurred while updating the event.";
        }
    }

    /// <summary>
    /// Handles cancellation of event editing by navigating back to the events list.
    /// </summary>
    private void Cancel()
    {
        // Step 1: Navigate back to the events list page
        _navigationManager.NavigateTo("/events");
    }

    /// <summary>
    /// Model class for editing existing events with validation attributes.
    /// This class defines the data structure and validation rules for the event edit form.
    /// </summary>
    private class EventEditModel
    {
        /// <summary>
        /// Gets or sets the title of the event.
        /// </summary>
        /// <value>A string that cannot be empty.</value>
        [Required(ErrorMessage = "Title is required.")]
        public string Title { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the detailed description of the event.
        /// </summary>
        /// <value>A string that cannot be empty.</value>
        [Required(ErrorMessage = "Description is required.")]
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the starting date and time of the event.
        /// </summary>
        /// <value>A DateTime representing when the event begins.</value>
        [Required(ErrorMessage = "Start time is required.")]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or sets the ending date and time of the event.
        /// </summary>
        /// <value>A DateTime representing when the event ends.</value>
        [Required(ErrorMessage = "End time is required.")]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or sets whether the event is suitable for families with children.
        /// </summary>
        /// <value>A boolean indicating if the event is family-friendly.</value>
        public bool FamilyFriendly { get; set; }

        /// <summary>
        /// Gets or sets the current status of the event.
        /// Valid values are defined in the StatusDTO enum.
        /// </summary>
        /// <value>The event's current status from the StatusDTO enum.</value>
        [Required(ErrorMessage = "Status is required.")]
        [EnumDataType(typeof(StatusDTO), ErrorMessage = "Invalid status selected.")]
        public StatusDTO Status { get; set; }

        /// <summary>
        /// Gets or sets the amount of trash collected during the event in kilograms.
        /// </summary>
        /// <value>A non-negative decimal representing the amount of trash collected.</value>
        [Required(ErrorMessage = "Trash collected amount is required.")]
        [Range(0, double.MaxValue, ErrorMessage = "Trash collected cannot be negative.")]
        public decimal TrashCollected { get; set; }
    }
}
