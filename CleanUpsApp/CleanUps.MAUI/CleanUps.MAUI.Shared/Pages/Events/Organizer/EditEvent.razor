@page "/events/{eventId:int}/edit"
@using CleanUps.MAUI.Shared.Pages.Auth
@using CleanUps.MAUI.Shared.Services.Interfaces
@using CleanUps.Shared.DTOs.Events
@using CleanUps.Shared.DTOs.Enums
@inject NavigationManager _navigationManager
@inject EventApiService _eventApiService 
@inject IAccessService _accessService

@if (isOrganizer)
{
    <div class="card shadow p-4">
        <h3>Edit Event</h3>

        @if (eventResult == null)
        {
            <p>Loading...</p>
        }
        else if (eventResult.IsSuccess && eventResult.Data != null)
        {
            <EditForm Model="eventEditModel" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-2">
                    <label for="title">Title</label>
                    <InputText id="title" @bind-Value="eventEditModel.Title" class="form-control" />
                </div>

                <div class="form-group mb-2">
                    <label for="description">Description</label>
                    <InputText id="description" @bind-Value="eventEditModel.Description" class="form-control" />
                </div>

                <div class="form-group mb-2">
                    <label for="startTime">Start Time of Event</label>
                    <InputDate id="startTime" @bind-Value="eventEditModel.StartTime" class="form-control" />
                </div>

                <div class="form-group mb-2">
                    <label for="endTime">End Time of Event</label>
                    <InputDate id="endTime" @bind-Value="eventEditModel.EndTime" class="form-control" />
                </div>

                <div class="form-check mb-2">
                    <InputCheckbox id="familyFriendly" @bind-Value="eventEditModel.FamilyFriendly" class="form-check-input" />
                    <label class="form-check-label" for="familyFriendly">Family Friendly</label>
                </div>

                <!-- Only show status change if the event's status is not Completed -->
                @if (eventResult.Data.Status != StatusDTO.Completed)
                {
                    <div class="form-group mb-2">
                        <label for="status">Event Status</label>
                        <InputSelect id="status" @bind-Value="eventEditModel.Status" class="form-control">
                            @foreach (var status in Enum.GetValues(typeof(StatusDTO)))
                            {
                                <option value="@status">@status</option>
                            }
                        </InputSelect>
                    </div>
                }

                <div class="mb-2">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                </div>

            </EditForm>
        }
        else
        {
            <p class="text-danger">Error: @eventResult.ErrorMessage</p>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
}
else
{
    <p>Access denied</p>
}

@code {
    [Parameter]
    public int eventId { get; set; }

    private Result<EventResponse> eventResult;
    private EventEditModel eventEditModel = new EventEditModel();
    private string errorMessage;
    
    private bool isLoggedIn = false;
    private bool isOrganizer = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is an organizer
        try
        {
            isLoggedIn = await _accessService.IsUserLoggedInAsync();
            isOrganizer = await _accessService.IsOrganizerAsync();
            AccessControl.CheckOrganizerAccess(isLoggedIn, isOrganizer, _navigationManager);
            
            // Load event data after access check
            await LoadEvent();
        }
        catch
        {
            // In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    private async Task LoadEvent()
    {
        eventResult = await _eventApiService.GetEventByIdAsync(eventId);

        if (eventResult.IsSuccess && eventResult.Data != null)
        {
            var data = eventResult.Data;
            eventEditModel.Title = data.Title;
            eventEditModel.Description = data.Description;
            eventEditModel.StartTime = data.StartTime;
            eventEditModel.EndTime = data.EndTime;
            eventEditModel.FamilyFriendly = data.FamilyFriendly;
            eventEditModel.Status = data.Status;
            eventEditModel.TrashCollected = data.TrashCollected;
        }
    }

    private async Task HandleSubmit()
    {
        var updateEvent = new UpdateEventRequest(
            EventId: eventId,
            Title: eventEditModel.Title,
            Description: eventEditModel.Description,
            StartTime: eventEditModel.StartTime,
            EndTime: eventEditModel.EndTime,
            FamilyFriendly: eventEditModel.FamilyFriendly,
            TrashCollected: eventEditModel.TrashCollected,
            Status: eventEditModel.Status,
            Location: new UpdateLocationRequest(0, 0, 0)
        );

        var result = await _eventApiService.UpdateEventAsync(eventId, updateEvent);
        if (result.IsSuccess)
        {
            _navigationManager.NavigateTo("/events");
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "An error occurred while updating the event.";
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/events");
    }

    private class EventEditModel
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool FamilyFriendly { get; set; }
        public StatusDTO Status { get; set; }
        public decimal TrashCollected { get; set; }
    }
}
