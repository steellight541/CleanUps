@page "/events/{eventId:int}/details"

@inject NavigationManager _navigationManager
@inject IEventApiService _eventApiService
@inject IEventAttendanceApiService _eventAttendanceApiService
@inject IAccessService _accessService
@inject IUserApiService _userApiService

@using CleanUps.Shared.DTOs.EventAttendances

<div class="card shadow p-4">
    <h3>Event Details</h3>

    @if (eventResult == null)
    {
        <p>Loading...</p>
    }
    else if (eventResult.IsSuccess && eventResult.Data != null)
    {
        var ev = eventResult.Data;

        <div class="mb-4">
            <h4>@ev.Title</h4>
            <p>@ev.Description</p>
        </div>

        <div class="row mb-4">
            <div class="col-md-6">
                <p><strong>Start Time:</strong> @ev.StartTime.ToString("g")</p>
                <p><strong>End Time:</strong> @ev.EndTime.ToString("g")</p>
                <p><strong>Status:</strong> @ev.Status</p>
            </div>
            <div class="col-md-6">
                <p><strong>Family Friendly:</strong> @(ev.FamilyFriendly ? "Yes" : "No")</p>
                <p><strong>Trash Collected:</strong> @ev.TrashCollected kg</p>
                <p><strong>Participants:</strong> @(eventAttendees?.Count ?? 0)</p>
            </div>
        </div>

        @if (ev.Location != null)
        {
            <div class="mb-4">
                <h5>Location</h5>
                <p>Latitude: @ev.Location.Latitude, Longitude: @ev.Location.Longitude</p>
            </div>
        }

        <div class="d-flex gap-2 mb-2">
            <button class="btn btn-secondary" @onclick="GoBack">Back</button>

            @* --- Attendance Button Logic (Visible to Volunteers & Organizers) --- *@
            @if (eventResult?.Data != null)
            {
                @if (eventResult.Data.EndTime < DateTime.Now) // Event is in the past
                {
                    @if (isCurrentUserAttending)
                    {
                        <button class="btn btn-success disabled" disabled>Attended</button>
                    }
                    else
                    {
                        <button class="btn btn-secondary disabled" disabled>Did not attend</button>
                    }
                }
                else // Event is in the future or ongoing
                {
                    @if (isAttendanceActionLoading)
                    {
                        <button class="btn btn-info disabled" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </button>
                    }
                    else
                    {
                        @if (isCurrentUserAttending)
                        {
                            <button class="btn btn-warning" @onclick="UnregisterFromEvent">Not Going</button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="SignUpForEvent">Going</button>
                        }
                    }
                }
            }

            @* --- Organizer-Specific Buttons --- *@
            @if (isOrganizer)
            {
                // Disable organizer buttons while attendance action is happening
                <button class="btn btn-primary" @onclick="() => EditEvent(ev.EventId)" disabled="@isAttendanceActionLoading">Edit</button>
                <button class="btn btn-danger" @onclick="() => DeleteEvent(ev.EventId)" disabled="@isAttendanceActionLoading">Delete</button>
                <button class="btn btn-info" @onclick="ToggleManageAttendance">
                    @(isManageAttendanceVisible ? "Hide" : "Show") User Attendance Management
                </button>
            }
        </div>

        @* --- Organizer Management Section --- *@
        @if (isOrganizer)
        {
            @if (isManageAttendanceVisible)
            {
                <div class="card bg-light p-3 mb-3">
                    <h5>Manage User Attendance</h5>
                    <div class="mb-2">
                        <input type="text" class="form-control" placeholder="Search users by name or email..." @bind="searchTerm" @bind:event="oninput" />
                    </div>

                    @if (allUsersResult == null)
                    {
                        <p><em>Loading users...</em></p>
                    }
                    else if (!allUsersResult.IsSuccess)
                    {
                        <p class="text-danger">Could not load users: @allUsersResult.ErrorMessage</p>
                    }
                    else if (!FilteredUsers.Any())
                    {
                        <p><em>No matching users found.</em></p>
                    }
                    else
                    {
                        <div class="list-group mb-2" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var user in FilteredUsers)
                            {
                                bool isAttending = eventAttendees?.Any(a => a.UserId == user.UserId) ?? false;
                                <div class="list-group-item d-flex justify-content-between align-items-center" key="@user.UserId">
                                    <div>
                                        @{ 
                                            bool isPastEvent = eventResult?.Data?.EndTime < DateTime.Now; 
                                        }
                                         @user.Name (@user.Email) - 
                                         <span class="@(isAttending ? "text-success fw-bold" : "text-muted")">
                                             @(isAttending ? (isPastEvent ? "Attended" : "Going") : "Not Going")
                                         </span>
                                    </div>
                                    <div class="form-check form-switch">
                                        @{
                                            bool isLoadingThisUser = manageAttendanceLoadingUserId == user.UserId;
                                            bool isPastEventForDisable = eventResult?.Data?.EndTime < DateTime.Now;
                                        }
                                        <input class="form-check-input"
                                               type="checkbox"
                                               role="switch"
                                               checked="@isAttending"
                                               @onchange="@(e => ToggleUserAttendance(user.Name, user.UserId, (bool)e.Value))"
                                               disabled="@(isLoadingThisUser || isPastEventForDisable)" />
                                        @if (isLoadingThisUser)
                                        {
                                            <span class="spinner-border spinner-border-sm text-secondary" role="status" aria-hidden="true"></span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(manageAttendanceMessage))
                    {
                        <p class="@manageAttendanceMessageClass mt-2">@manageAttendanceMessage</p>
                    }
                </div>
            }
        }
        @* --- End Organizer Management Section --- *@
    }
    else
    {
        <p class="text-danger">Error: @eventResult.ErrorMessage</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
</div>

@code {
    /// <summary>
    /// EventDetails component displays detailed information about a specific cleanup event.
    /// It provides functionality for users to join/leave events and for organizers to manage attendance.
    /// </summary>

    /// <summary>
    /// The ID of the event to display, passed as a route parameter.
    /// </summary>
    [Parameter]
    public int eventId { get; set; }

    private Result<EventResponse> eventResult;
    private List<UserResponse> eventAttendees;
    private string errorMessage = string.Empty;
    private bool isLoadingEvent = true;
    private bool isAttendanceActionLoading = false;

    private int? currentUserId;
    private RoleDTO? currentUserRole;
    private bool isCurrentUserAttending = false;
    private bool isOrganizer = false;

    // Organizer Manage Attendance State
    private Result<List<UserResponse>>? allUsersResult;
    private bool isManageAttendanceVisible = false;
    private string searchTerm = string.Empty;
    private string manageAttendanceMessage = string.Empty;
    private string manageAttendanceMessageClass = string.Empty;
    private int? manageAttendanceLoadingUserId = null;

    /// <summary>
    /// Filtered user list for organizer management based on search term and event status.
    /// </summary>
    private IEnumerable<UserResponse> FilteredUsers 
    {
        get 
        {
            if (allUsersResult?.Data == null) return Enumerable.Empty<UserResponse>();

            IEnumerable<UserResponse> baseList;
            bool isPastEvent = eventResult?.Data?.EndTime < DateTime.Now;

            if (isPastEvent)
            {
                // For past events, show only users who attended
                var attendeeIds = eventAttendees?.Select(a => a.UserId).ToHashSet() ?? new HashSet<int>();
                baseList = allUsersResult.Data.Where(u => attendeeIds.Contains(u.UserId));
            }
            else
            {
                // For future events, show all users
                baseList = allUsersResult.Data;
            }

            // Apply search term
            if (string.IsNullOrEmpty(searchTerm))
            {
                return baseList;
            }
            else
            {
                return baseList.Where(u => 
                    u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
            }
        }
    }

    /// <summary>
    /// Initializes the component, loading event data and user permissions.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        // Step 1: Set loading state
        isLoadingEvent = true;
        
        try
        {
            // Step 2: Get current user information
            currentUserId = await _accessService.GetLoggedUserIdAsync();
            currentUserRole = await _accessService.GetLoggedUserRoleAsync();

            // Step 3: Check if user is authenticated, redirect to login if not
            if (currentUserId == null || currentUserRole == null)
            {
                _navigationManager.NavigateTo("/auth/login");
                return;
            }

            // Step 4: Set user role permissions
            isOrganizer = currentUserRole == RoleDTO.Organizer;

            // Step 5: Load event data and attendees
            await LoadEventData();

            // Step 6: If user is organizer, load all users for attendance management
            if (isOrganizer)
            {
                allUsersResult = await _userApiService.GetAllAsync();
                if (!allUsersResult.IsSuccess)
                {
                    manageAttendanceMessage = $"Could not load all users for management: {allUsersResult.ErrorMessage}";
                    manageAttendanceMessageClass = "text-danger";
                }
            }
        }
        catch (Exception ex)
        {
            // Step 7: Handle any exceptions during initialization
            errorMessage = $"An error occurred during initialization: {ex.Message}";
        }
        finally
        {
            // Step 8: Clear loading state
            isLoadingEvent = false;
        }
    }

    /// <summary>
    /// Loads event data and attendance information.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task LoadEventData()
    {
        // Step 1: Reset state variables
        errorMessage = string.Empty;
        eventAttendees = new List<UserResponse>();
        isCurrentUserAttending = false;

        // Step 2: Load event details
        eventResult = await _eventApiService.GetByIdAsync(eventId);

        // Step 3: If event loaded successfully, load attendance data
        if (eventResult.IsSuccess && eventResult.Data != null)
        {
            // Step 4: Check if event is in the past
            bool isPastEvent = eventResult.Data.EndTime < DateTime.Now;

            // Step 5: Load event attendance data
            var eventAttendanceResult = await _eventAttendanceApiService.GetUsersByEventIdAsync(eventId);
            if (eventAttendanceResult.IsSuccess)
            {
                // Step 6: Set attendees list and check if current user is attending
                eventAttendees = eventAttendanceResult.Data ?? new List<UserResponse>();
                if (currentUserId != null)
                {
                    isCurrentUserAttending = eventAttendees.Any(u => u.UserId == currentUserId.Value);
                }
            }
            else
            {
                // Step 7: Handle error loading attendees
                errorMessage = $"Could not load attendee list: {eventAttendanceResult.ErrorMessage}";
            }
        }
    }

    /// <summary>
    /// Registers the current user for the event.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task SignUpForEvent()
    {
        // Step 1: Verify user is logged in
        if (currentUserId == null) return;
        
        // Step 2: Set loading state
        isAttendanceActionLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        // Step 3: Create and send attendance request
        var request = new CreateEventAttendanceRequest(currentUserId.Value, eventId);
        var result = await _eventAttendanceApiService.CreateAsync(request);

        // Step 4: Handle response
        if (result.IsSuccess)
        {
            // Step 5: Reload event data to reflect changes
            await LoadEventData();
        }
        else
        {
            // Step 6: Display error message if failed
            errorMessage = result.ErrorMessage ?? "Failed to sign up for the event.";
        }

        // Step 7: Clear loading state
        isAttendanceActionLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Removes the current user from the event's attendance list.
    /// </summary>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task UnregisterFromEvent()
    {
        // Step 1: Verify user is logged in
        if (currentUserId == null) return;
        
        // Step 2: Set loading state
        isAttendanceActionLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        // Step 3: Create and send delete attendance request
        var request = new DeleteEventAttendanceRequest(currentUserId.Value, eventId);
        var result = await _eventAttendanceApiService.DeleteAsync(request);

        // Step 4: Handle response
        if (result.IsSuccess)
        {
            // Step 5: Reload event data to reflect changes
            await LoadEventData();
        }
        else
        {
            // Step 6: Display error message if failed
            errorMessage = result.ErrorMessage ?? "Failed to unregister from the event.";
        }

        // Step 7: Clear loading state
        isAttendanceActionLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Navigates back to the events list page.
    /// </summary>
    private void GoBack()
    {
        // Step 1: Navigate back to the events list
        _navigationManager.NavigateTo("/events");
    }

    /// <summary>
    /// Navigates to the edit page for the specified event.
    /// </summary>
    /// <param name="eventId">The ID of the event to edit.</param>
    private void EditEvent(int eventId)
    {
        // Step 1: Navigate to the edit page for the specified event
        _navigationManager.NavigateTo($"/events/{eventId}/edit");
    }

    /// <summary>
    /// Deletes the specified event and redirects to the events list on success.
    /// </summary>
    /// <param name="eventId">The ID of the event to delete.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task DeleteEvent(int eventId)
    {
        // Step 1: Set loading state
        isAttendanceActionLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        // Step 2: Send delete request to API
        var deleteResult = await _eventApiService.DeleteAsync(new DeleteEventRequest(eventId));
        
        // Step 3: Handle response
        if (deleteResult.IsSuccess)
        {
            // Step 4: Navigate back to events list on success
            _navigationManager.NavigateTo("/events");
        }
        else
        {
            // Step 5: Display error message if failed
            errorMessage = deleteResult.ErrorMessage ?? "An error occurred while deleting the event.";
        }
        
        // Step 6: Clear loading state
        isAttendanceActionLoading = false;
        StateHasChanged();
    }

    /// <summary>
    /// Toggles the visibility of the attendance management section.
    /// </summary>
    private void ToggleManageAttendance()
    {
        // Step 1: Toggle visibility flag
        isManageAttendanceVisible = !isManageAttendanceVisible;
        
        // Step 2: Clear search and messages when hiding
        if (!isManageAttendanceVisible)
        {
            searchTerm = string.Empty;
            manageAttendanceMessage = string.Empty;
        }
    }

    /// <summary>
    /// Toggles a user's attendance status for this event.
    /// </summary>
    /// <param name="userName">The name of the user for display purposes.</param>
    /// <param name="userIdToToggle">The ID of the user whose attendance is being toggled.</param>
    /// <param name="shouldAttend">Whether the user should be added (true) or removed (false) from the event.</param>
    /// <returns>A task representing the asynchronous operation.</returns>
    private async Task ToggleUserAttendance(string userName, int userIdToToggle, bool shouldAttend)
    {
        // Step 1: Prevent modification for past events
        if (eventResult?.Data?.EndTime < DateTime.Now)
        {
            manageAttendanceMessage = "Cannot modify attendance for past events.";
            manageAttendanceMessageClass = "text-warning";
            StateHasChanged();
            return; 
        }

        // Step 2: Verify user is an organizer
        if (!isOrganizer) return; 

        // Step 3: Set loading state
        manageAttendanceLoadingUserId = userIdToToggle;
        manageAttendanceMessage = string.Empty;
        StateHasChanged();

        // Step 4: Perform the appropriate action based on toggle state
        Result<EventAttendanceResponse>? result = null;
        if (shouldAttend)
        {
            // Step 5a: Add user to event
            var request = new CreateEventAttendanceRequest(userIdToToggle, eventId);
            result = await _eventAttendanceApiService.CreateAsync(request);
        }
        else
        {
            // Step 5b: Remove user from event
            var request = new DeleteEventAttendanceRequest(userIdToToggle, eventId);
            result = await _eventAttendanceApiService.DeleteAsync(request);
        }

        // Step 6: Handle response
        if (result != null && result.IsSuccess)
        {
            // Step 7a: Show success message and reload data
            manageAttendanceMessage = $"Attendance updated successfully for {userName}.";
            manageAttendanceMessageClass = "text-success";
            await LoadEventData();
        }
        else
        {
            // Step 7b: Show error message
            manageAttendanceMessage = $"Error updating attendance for {userName}: {result?.ErrorMessage ?? "Unknown error"}";
            manageAttendanceMessageClass = "text-danger";
        }

        // Step 8: Clear loading state
        manageAttendanceLoadingUserId = null;
        StateHasChanged();
    }
}