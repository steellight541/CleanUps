@page "/events/{eventId:int}/details"
@using CleanUps.Shared.DTOs.Events
@using CleanUps.Shared.DTOs.Users
@inject EventApiService _eventApiService
@inject EventAttendanceApiService _eventAttendanceApiService
@inject UserApiService _userApiService
@inject NavigationManager _navigationManager

<div class="card shadow p-4">
    @if (eventResult == null || usersResult == null || usersAttendingTheEvent == null)
    {
        <p>Loading...</p>
    }
    else if (!eventResult.IsSuccess)
    {
        <p class="text-danger">Error: @eventResult.ErrorMessage</p>
    }
    else
    {
        <div class="mb-3">
            <h3>@eventResult.Data.Title</h3>
            <h4>@eventResult.Data.Description</h4>
            <p><strong>Event ID:</strong> @eventResult.Data.EventId</p>
            <p><strong>Status:</strong> @eventResult.Data.Status</p>
            <p><strong>Family Friendly:</strong> @(eventResult.Data.FamilyFriendly ? "Yes" : "No")</p>
            <p><strong>Participants Signed Up:</strong> @(usersAttendingTheEvent.Data?.Count ?? 0)</p>
            <p><strong>Created Date:</strong> @eventResult.Data.CreatedDate.ToShortDateString()</p>
            <p><strong>Location:</strong> Not implemented yet</p>
        </div>

        @if (CurrentUserRole == RoleDTO.Organizer)
        {
            <button class="btn btn-primary mt-3 mb-3" @onclick="ToggleManageAttendance">Manage Attendance</button>

            @if (isManageAttendanceVisible)
            {
                <div class="card mt-2 p-3">
                    <input type="text" class="form-control mb-2" placeholder="Search users" @bind="searchTerm" @bind:event="oninput" />
                    <div class="list-group" style="max-height: 250px; overflow-y: auto;">
                        @foreach (var user in FilteredUsers)
                        {
                            bool isAttending = usersAttendingTheEvent.Data?.Any(a => a.UserId == user.UserId) ?? false;
                            <div class="list-group-item d-flex justify-content-between align-items-center" key="@user.UserId">
                                <span>@user.Name - <span class="@(isAttending ? "text-success" : "text-danger")">@(isAttending ? "Going" : "Not Going")</span></span>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" role="switch" checked="@isAttending" @onchange="@((ChangeEventArgs e) => ToggleAttendance(user.UserId, (bool)e.Value))" disabled="@isLoading" />
                                </div>
                            </div>
                        }
                    </div>
                    <button class="btn btn-dark  mt-2" @onclick="ToggleManageAttendance">Close</button>
                </div>
            }
        }

        <div class="mb-2">
            <button class="btn btn-secondary" @onclick="Cancel">Back</button>
        </div>

        @if (!string.IsNullOrEmpty(message))
        {
            <p class="@messageClass">@message</p>
        }
        @if (isLoading)
        {
            <div class="spinner-border text-warning" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int eventId { get; set; }

    private Result<EventResponse> eventResult;
    private Result<List<UserResponse>> usersResult;
    private Result<List<UserResponse>> usersAttendingTheEvent;
    private string searchTerm = string.Empty;
    private string message;
    private string messageClass;
    private bool isLoading = false;
    private bool isManageAttendanceVisible = false; // New flag to control visibility

    private RoleDTO CurrentUserRole = RoleDTO.Organizer;

    private IEnumerable<UserResponse> FilteredUsers => usersResult.Data?.Where(u =>
        string.IsNullOrEmpty(searchTerm) ||
        u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        ?? Enumerable.Empty<UserResponse>();

    protected override async Task OnInitializedAsync()
    {
        eventResult = await _eventApiService.GetEventByIdAsync(eventId);
        usersResult = await _userApiService.GetAllUsersAsync();
        usersAttendingTheEvent = await _eventAttendanceApiService.GetUsersByEventIdAsync(eventId);
    }

    private async Task ToggleAttendance(int userId, bool isAttending)
    {
        isLoading = true;
        StateHasChanged(); // Update UI to show loading

        if (isAttending)
        {
            var attendance = new CreateEventAttendanceRequest(userId, eventId);
            var result = await _eventAttendanceApiService.CreateAttendanceAsync(attendance);
            if (result.IsSuccess)
            {
                message = "User signed up successfully.";
                messageClass = "text-success";
            }
            else
            {
                message = $"Error signing up user: {result.ErrorMessage}";
                messageClass = "text-danger";
            }
        }
        else
        {
            var result = await _eventAttendanceApiService.DeleteAttendanceAsync(userId, eventId);
            if (result.IsSuccess)
            {
                message = "User removed successfully.";
                messageClass = "text-success";
            }
            else
            {
                message = $"Error removing user: {result.ErrorMessage}";
                messageClass = "text-danger";
            }
        }
        // Refresh attendees list to update switch states
        usersAttendingTheEvent = await _eventAttendanceApiService.GetUsersByEventIdAsync(eventId);
        isLoading = false;
        StateHasChanged(); // Update UI to hide loading and show updated data
    }

    private void ToggleManageAttendance()
    {
        isManageAttendanceVisible = !isManageAttendanceVisible; // Toggle visibility
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/events");
    }
}