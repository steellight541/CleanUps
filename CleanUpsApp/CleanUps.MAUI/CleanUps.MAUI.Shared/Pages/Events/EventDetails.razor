@page "/events/{eventId:int}/details"

@inject NavigationManager _navigationManager
@inject IEventApiService _eventApiService 
@inject IEventAttendanceApiService _eventAttendanceApiService
@inject IAccessService _accessService

<div class="card shadow p-4">
    <h3>Event Details</h3>

    @if (eventResult == null)
    {
        <p>Loading...</p>
    }
    else if (eventResult.IsSuccess && eventResult.Data != null)
    {
        var ev = eventResult.Data;

        <div class="mb-4">
            <h4>@ev.Title</h4>
            <p>@ev.Description</p>
        </div>

        <div class="row mb-4">
            <div class="col-md-6">
                <p><strong>Start Time:</strong> @ev.StartTime.ToString("g")</p>
                <p><strong>End Time:</strong> @ev.EndTime.ToString("g")</p>
                <p><strong>Status:</strong> @ev.Status</p>
            </div>
            <div class="col-md-6">
                <p><strong>Family Friendly:</strong> @(ev.FamilyFriendly ? "Yes" : "No")</p>
                <p><strong>Trash Collected:</strong> @ev.TrashCollected kg</p>
                <p><strong>Participants:</strong> @(attendees?.Count ?? 0)</p>
            </div>
        </div>

        @if (ev.Location != null)
        {
            <div class="mb-4">
                <h5>Location</h5>
                <p>Latitude: @ev.Location.Latitude, Longitude: @ev.Location.Longitude</p>
            </div>
        }

        @if (attendees != null && attendees.Count > 0)
        {
            <div class="mb-4">
                <h5>Attendees</h5>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Role</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in attendees)
                            {
                                <tr>
                                    <td>@user.Name</td>
                                    <td>@user.Email</td>
                                    <td>@user.Role</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        <div class="d-flex gap-2 mb-2">
            <button class="btn btn-secondary" @onclick="GoBack">Back</button>

            @if (isOrganizer)
            {
                <button class="btn btn-primary" @onclick="() => EditEvent(ev.EventId)">Edit</button>
                <button class="btn btn-danger" @onclick="() => DeleteEvent(ev.EventId)">Delete</button>
            }
        </div>
    }
    else
    {
        <p class="text-danger">Error: @eventResult.ErrorMessage</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
</div>

@code {
    [Parameter]
    public int eventId { get; set; }

    private Result<EventResponse> eventResult;
    private List<UserResponse> attendees;
    private string errorMessage = string.Empty;
    private bool isLoggedIn = false;
    private bool isOrganizer = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if user is logged in (volunteers and organizers)
            isLoggedIn = await _accessService.IsUserLoggedInAsync();
            AccessControl.CheckVolunteerAccess(isLoggedIn, _navigationManager);

            // Check if user is an organizer (for UI controls)
            isOrganizer = await _accessService.IsOrganizerAsync();

            // Load event data
            await LoadEventData();
        }
        catch
        {
            // In case of errors, redirect to login
            _navigationManager.NavigateTo("/auth/login");
        }
    }

    private async Task LoadEventData()
    {
        eventResult = await _eventApiService.GetByIdAsync(eventId);

        if (eventResult.IsSuccess && eventResult.Data != null)
        {
            // Load attendees
            var attendeesResult = await _eventAttendanceApiService.GetUsersByEventIdAsync(eventId);
            if (attendeesResult.IsSuccess)
            {
                attendees = attendeesResult.Data;
            }
        }
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/events");
    }

    private void EditEvent(int eventId)
    {
        _navigationManager.NavigateTo($"/events/{eventId}/edit");
    }

    private async Task DeleteEvent(int eventId)
    {
        var result = await _eventApiService.DeleteAsync(new DeleteEventRequest(eventId));
        if (result.IsSuccess)
        {
            _navigationManager.NavigateTo("/events");
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "An error occurred while deleting the event.";
        }
    }
}