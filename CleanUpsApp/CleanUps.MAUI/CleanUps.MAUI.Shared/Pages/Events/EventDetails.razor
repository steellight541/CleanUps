@page "/events/{eventId:int}/details"

@inject NavigationManager _navigationManager
@inject IEventApiService _eventApiService 
@inject IEventAttendanceApiService _eventAttendanceApiService
@inject IAccessService _accessService

@using CleanUps.Shared.DTOs.EventAttendances

<div class="card shadow p-4">
    <h3>Event Details</h3>

    @if (eventResult == null)
    {
        <p>Loading...</p>
    }
    else if (eventResult.IsSuccess && eventResult.Data != null)
    {
        var ev = eventResult.Data;

        <div class="mb-4">
            <h4>@ev.Title</h4>
            <p>@ev.Description</p>
        </div>

        <div class="row mb-4">
            <div class="col-md-6">
                <p><strong>Start Time:</strong> @ev.StartTime.ToString("g")</p>
                <p><strong>End Time:</strong> @ev.EndTime.ToString("g")</p>
                <p><strong>Status:</strong> @ev.Status</p>
            </div>
            <div class="col-md-6">
                <p><strong>Family Friendly:</strong> @(ev.FamilyFriendly ? "Yes" : "No")</p>
                <p><strong>Trash Collected:</strong> @ev.TrashCollected kg</p>
                <p><strong>Participants:</strong> @(eventAttendees?.Count ?? 0)</p>
            </div>
        </div>

        @if (ev.Location != null)
        {
            <div class="mb-4">
                <h5>Location</h5>
                <p>Latitude: @ev.Location.Latitude, Longitude: @ev.Location.Longitude</p>
            </div>
        }

        <div class="d-flex gap-2 mb-2">
            <button class="btn btn-secondary" @onclick="GoBack">Back</button>

            @* --- Attendance Button Logic (Visible to Volunteers & Organizers) --- *@
            @if (eventResult?.Data != null)
            {
                @if (eventResult.Data.EndTime < DateTime.Now) // Event is in the past
                {
                    @if (isCurrentUserAttending)
                    {
                        <button class="btn btn-success disabled" disabled>Attended</button>
                    }
                    else
                    {
                        <button class="btn btn-secondary disabled" disabled>Did not attend</button>
                    }
                }
                else // Event is in the future or ongoing
                {
                    @if (isAttendanceActionLoading)
                    {
                        <button class="btn btn-info disabled" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </button>
                    }
                    else
                    {
                        @if (isCurrentUserAttending)
                        {
                            <button class="btn btn-warning" @onclick="UnregisterFromEvent">Not Going</button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="SignUpForEvent">Going</button>
                        }
                    }
                }
            }

            @* --- Organizer-Specific Buttons --- *@
            @if (isOrganizer)
            {
                 // Disable organizer buttons while attendance action is happening
                <button class="btn btn-primary" @onclick="() => EditEvent(ev.EventId)" disabled="@isAttendanceActionLoading">Edit</button>
                <button class="btn btn-danger" @onclick="() => DeleteEvent(ev.EventId)" disabled="@isAttendanceActionLoading">Delete</button>
            }
        </div>
    }
    else
    {
        <p class="text-danger">Error: @eventResult.ErrorMessage</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
</div>

@code {
    [Parameter]
    public int eventId { get; set; }

    private Result<EventResponse> eventResult;
    private List<UserResponse> eventAttendees;
    private string errorMessage = string.Empty;
    private bool isLoadingEvent = true;
    private bool isAttendanceActionLoading = false;

    private int? currentUserId;
    private RoleDTO? currentUserRole;
    private bool isCurrentUserAttending = false;
    private bool isOrganizer = false;

    protected override async Task OnInitializedAsync()
    {
        isLoadingEvent = true;
        try
        {
            currentUserId = await _accessService.GetLoggedUserIdAsync();
            currentUserRole = await _accessService.GetLoggedUserRoleAsync();

            if (currentUserId == null || currentUserRole == null)
            {
                _navigationManager.NavigateTo("/auth/login");
                return;
            }

            isOrganizer = currentUserRole == RoleDTO.Organizer;

            await LoadEventData();
        }
        catch(Exception ex)
        {
            errorMessage = $"An error occurred during initialization: {ex.Message}";
        }
        finally
        {
             isLoadingEvent = false;
        }
    }

    private async Task LoadEventData()
    {
        errorMessage = string.Empty;
        eventAttendees = new List<UserResponse>();
        isCurrentUserAttending = false;

        eventResult = await _eventApiService.GetByIdAsync(eventId);

        if (eventResult.IsSuccess && eventResult.Data != null)
        {
            bool isPastEvent = eventResult.Data.EndTime < DateTime.Now;

            // Load eventAttendance data
            var eventAttendanceResult = await _eventAttendanceApiService.GetUsersByEventIdAsync(eventId);
            if (eventAttendanceResult.IsSuccess)
            {
                eventAttendees = eventAttendanceResult.Data ?? new List<UserResponse>();
                if (currentUserId != null)
                {
                    isCurrentUserAttending = eventAttendees.Any(u => u.UserId == currentUserId.Value);
                }
            }
            else
            {
                errorMessage = $"Could not load attendee list: {eventAttendanceResult.ErrorMessage}";
            }
        }
    }

    private async Task SignUpForEvent()
    {
        if (currentUserId == null) return;
        isAttendanceActionLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        var request = new CreateEventAttendanceRequest(currentUserId.Value, eventId);
        var result = await _eventAttendanceApiService.CreateAsync(request);

        if (result.IsSuccess)
        {
            await LoadEventData();
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "Failed to sign up for the event.";
        }

        isAttendanceActionLoading = false;
        StateHasChanged();
    }

    private async Task UnregisterFromEvent()
    {
         if (currentUserId == null) return;
        isAttendanceActionLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        var request = new DeleteEventAttendanceRequest(currentUserId.Value, eventId);
        var result = await _eventAttendanceApiService.DeleteAsync(request);

        if (result.IsSuccess)
        {
            await LoadEventData();
        }
        else
        {
             errorMessage = result.ErrorMessage ?? "Failed to unregister from the event.";
        }

        isAttendanceActionLoading = false;
        StateHasChanged();
    }

    private void GoBack()
    {
        _navigationManager.NavigateTo("/events");
    }

    private void EditEvent(int eventId)
    {
        _navigationManager.NavigateTo($"/events/{eventId}/edit");
    }

    private async Task DeleteEvent(int eventId)
    {
        isAttendanceActionLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        var deleteResult = await _eventApiService.DeleteAsync(new DeleteEventRequest(eventId));
        if (deleteResult.IsSuccess)
        {
            _navigationManager.NavigateTo("/events");
        }
        else
        {
            errorMessage = deleteResult.ErrorMessage ?? "An error occurred while deleting the event.";
        }
        isAttendanceActionLoading = false;
        StateHasChanged();
    }
}