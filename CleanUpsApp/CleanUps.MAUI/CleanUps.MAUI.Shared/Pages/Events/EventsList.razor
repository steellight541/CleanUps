@page "/events"

@inject NavigationManager _navigationManager
@inject IEventApiService _eventApiService
@inject IEventAttendanceApiService _eventAttendanceApiService
@inject IAccessService _accessService

<div class="card shadow p-4">

    <h3>Events</h3>

    @if (loadedEvents == null)
    {
        <p>Loading events...</p>
    }
    else
    {
        @if (isOrganizer)
        {

            <div class="row">
                <div class="col-md-4 mb-3">
                    <button class="btn btn-success" @onclick="CreateNewEvent">Create New Event</button>
                </div>
            </div>


        }

        <!-- Table layout for larger screens -->
        <div class="d-none d-md-block mb-2">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Start time</th>
                        <th>End time</th>
                        <th>Family Friendly?</th>
                        <th>Trash Collected</th>
                        <th>Status</th>
                        <th>Location</th>
                        <th>Participants</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ev in loadedEvents)
                    {
                        <tr>
                            <td>@ev.EventId</td>
                            <td>@ev.Title</td>
                            <td>@ev.Description</td>
                            <td>@ev.StartTime.ToShortDateString()</td>
                            <td>@ev.EndTime.ToShortDateString()</td>
                            <td>@(ev.FamilyFriendly ? "Yes" : "No")</td>
                            <td>@ev.TrashCollected</td>
                            <td>@ev.Status.ToString()</td>
                            <td>No location yet</td>
                            <td>@GetAttendeeCount(ev.EventId)</td>
                            <td>
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <button class="btn btn-primary btn-sm mt-2" @onclick="() => ViewDetails(ev.EventId)">View</button>
                                    @if (isOrganizer)
                                    {
                                        <button class="btn btn-secondary btn-sm mt-2" @onclick="() => EditEvent(ev.EventId)">Edit</button>
                                        <button class="btn btn-danger btn-sm mt-2" @onclick="() => DeleteEvent(ev.EventId)">Delete</button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                    @if (isLoadingEvents)
                    {
                        <tr>
                            <td colspan="11" class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading more events...
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- List-group layout for small screens with dropdown -->
        <div class="d-block d-md-none mb-2">
            <div class="list-group">
                @foreach (var ev in loadedEvents)
                {
                    <div class="list-group-item">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">@ev.Title</h5>
                            @if (isOrganizer)
                            {
                                <div class="dropdown">
                                    <button class="btn btn-dark btn-sm dropdown-toggle" type="button" id="dropdownMenuButton-@ev.EventId" data-bs-toggle="dropdown" aria-expanded="false">
                                        Actions
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-@ev.EventId">

                                        <li>
                                            <button class="dropdown-item text-secondary" @onclick="() => EditEvent(ev.EventId)">
                                                <i class="bi bi-pencil-fill me-2"></i>Edit
                                            </button>
                                        </li>
                                        <li><hr class="dropdown-divider"></li>
                                        <li>
                                            <button class="dropdown-item text-danger" @onclick="() => DeleteEvent(ev.EventId)">
                                                <i class="bi bi-trash-fill me-2"></i>Delete
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            }
                        </div>
                        <p><strong>Start Time:</strong> @ev.StartTime.ToShortDateString()</p>
                        <p><strong>End Time:</strong> @ev.EndTime.ToShortDateString()</p>
                        <p><strong>Status:</strong> @ev.Status.ToString()</p>
                        <p><strong>Participants:</strong> @GetAttendeeCount(ev.EventId)</p>
                        <div class="d-flex flex-column gap-2">
                            <button class="btn btn-primary btn-sm mt-2" @onclick="() => ViewDetails(ev.EventId)">View</button>
                        </div>
                    </div>
                }
                @if (isLoadingEvents)
                {
                    <div class="list-group-item text-center">
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        Loading more events...
                    </div>
                }
            </div>
        </div>

        @if (loadError != null)
        {
            <p class="text-danger">Error: @loadError</p>
        }

    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
</div>

@code {
    private Result<List<EventResponse>> events;
    private List<EventResponse> loadedEvents = new List<EventResponse>();
    private string errorMessage;
    private string loadError;
    private bool isOrganizer = false;
    private Dictionary<int, int> eventAttendeeCount = new Dictionary<int, int>();
    private bool isLoadingAttendees = false;
    private bool isLoadingEvents = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isOrganizer = await _accessService.IsOrganizerAsync();
        }
        catch
        {
            // In case of errors, assume not organizer
            isOrganizer = false;
        }

        // First load the events
        await LoadEvents();

        // Check if user is an organizer to show/hide certain UI elements
    }

    private async Task LoadEvents()
    {
        try
        {
            isLoadingEvents = true;
            StateHasChanged();

            events = await _eventApiService.GetAllAsync();

            if (events.IsSuccess && events.Data != null)
            {
                // Simulate progressive loading by adding events one by one with a small delay
                foreach (var ev in events.Data)
                {
                    loadedEvents.Add(ev);

                    // Update UI after each event is added
                    StateHasChanged();

                    // Optional: Small delay to show the progressive loading (remove in production)
                    await Task.Delay(20);
                }

                // Now load the attendance counts
                await LoadAttendeeCountsAsync();
            }
            else
            {
                loadError = events.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            loadError = $"Error loading events: {ex.Message}";
        }
        finally
        {
            isLoadingEvents = false;
            StateHasChanged();
        }
    }

    private async Task LoadAttendeeCountsAsync()
    {
        if (loadedEvents != null && loadedEvents.Count > 0)
        {
            isLoadingAttendees = true;
            StateHasChanged();

            foreach (var ev in loadedEvents)
            {
                var result = await _eventAttendanceApiService.GetUsersByEventIdAsync(ev.EventId);
                eventAttendeeCount[ev.EventId] = result.IsSuccess && result.Data != null ? result.Data.Count : 0;
                StateHasChanged();
            }

            isLoadingAttendees = false;
        }
    }

    private string GetAttendeeCount(int eventId)
    {
        if (isLoadingAttendees && !eventAttendeeCount.ContainsKey(eventId))
        {
            return "Loading...";
        }
        return eventAttendeeCount.ContainsKey(eventId) ? eventAttendeeCount[eventId].ToString() : "0";
    }

    private void ViewDetails(int eventId)
    {
        _navigationManager.NavigateTo($"/events/{eventId}/details");
    }

    private void EditEvent(int eventId)
    {
        _navigationManager.NavigateTo($"/events/{eventId}/edit");
    }

    private async Task DeleteEvent(int eventId)
    {
        var result = await _eventApiService.DeleteAsync(new DeleteEventRequest(eventId));
        if (result.IsSuccess)
        {
            // Reload events after deletion
            loadedEvents.Clear();
            await LoadEvents();
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "An error occurred while deleting the event.";
        }
    }

    private void CreateNewEvent()
    {
        _navigationManager.NavigateTo("/events/create");
    }
}