@page "/events"

@inject NavigationManager _navigationManager
@inject IEventApiService _eventApiService
@inject IEventAttendanceApiService _eventAttendanceApiService
@inject IAccessService _accessService

<div class="card shadow p-4">

    <h3>Events</h3>

    @* Section: Loading Indicator *@
    @if (loadedEvents == null)
    {
        <p>Loading events...</p>
    }
    else
    {
        @* Section: Organizer Actions *@
        @if (isOrganizer)
        {

            <div class="row">
                <div class="col-md-4 mb-3">
                    <button class="btn btn-success" @onclick="CreateNewEvent">Create New Event</button>
                </div>
            </div>


        }

        @* LARGE SCREEN START *@
        @* Section: Table Layout (Large Screens) *@
        <div class="d-none d-md-block mb-2">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Start time</th>
                        <th>End time</th>
                        <th>Family Friendly?</th>
                        <th>Trash Collected</th>
                        <th>Status</th>
                        <th>Location</th>
                        <th>Participants</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @* Table Row Loop, actually loads the events data (Large Screens) *@
                    @foreach (EventResponse loadedEvent in loadedEvents)
                    {
                        <tr>
                            <td>@loadedEvent.EventId</td>
                            <td>@loadedEvent.Title</td>
                            <td>@loadedEvent.Description</td>
                            <td>@loadedEvent.StartTime.ToShortDateString()</td>
                            <td>@loadedEvent.EndTime.ToShortDateString()</td>
                            <td>@(loadedEvent.FamilyFriendly ? "Yes" : "No")</td>
                            <td>@loadedEvent.TrashCollected</td>
                            <td>@loadedEvent.Status.ToString()</td>
                            <td>No location yet</td>
                            <td>@GetAttendeeCount(loadedEvent.EventId)</td>
                            <td>
                                <div class="btn-group" role="group" aria-label="Basic example">
                                    <button class="btn btn-primary btn-sm mt-2" @onclick="() => ViewDetails(loadedEvent.EventId)" disabled="@(isLoadingEvents || deletingEventId == loadedEvent.EventId)">View</button>
                                    @if (isOrganizer)
                                    {
                                        <button class="btn btn-secondary btn-sm mt-2" @onclick="() => EditEvent(loadedEvent.EventId)" disabled="@(isLoadingEvents || deletingEventId == loadedEvent.EventId)">Edit</button>
                                        <button class="btn btn-danger btn-sm mt-2" @onclick="() => DeleteEvent(loadedEvent.EventId)" disabled="@(isLoadingEvents || deletingEventId == loadedEvent.EventId)">
                                            @if (deletingEventId == loadedEvent.EventId)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-trash-fill"></i>
                                            }
                                        </button>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                    @* Loading Indicator for More Events *@
                    @if (isLoadingEvents)
                    {
                        <tr>
                            <td colspan="11" class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                Loading more events...
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        @* LARGE SCREEN END *@




        @* SMALL SCREEEN START *@
        @* Section: List Group Layout (Small Screens) *@
        <div class="d-block d-md-none mb-2">
            @* Card Loop, actually loads the events data (Small Screens) *@
            @foreach (EventResponse loadedEvent in loadedEvents)
            {
                <div class="card mb-3 shadow-sm">
                    <div class="card-header position-relative py-2">
                        <h5 class="mb-0 pe-5">@loadedEvent.Title</h5>
                        @if (isOrganizer)
                        {
                            <div class="dropdown" style="position: absolute; top: 0.25rem; right: 0.25rem;">
                                <button class="btn btn-outline-secondary btn-sm dropdown-toggle" type="button" id="dropdownMenuButton-sm-@loadedEvent.EventId" data-bs-toggle="dropdown" aria-expanded="false">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16" aria-hidden="true">
                                        <path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"/>
                                    </svg>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton-sm-@loadedEvent.EventId">
                                    <li>
                                        <button class="dropdown-item text-dark" @onclick="() => EditEvent(loadedEvent.EventId)" disabled="@(isLoadingEvents || deletingEventId == loadedEvent.EventId)">
                                            <i class="bi bi-pencil-fill me-2"></i>Edit
                                        </button>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <button class="dropdown-item text-danger" @onclick="() => DeleteEvent(loadedEvent.EventId)" disabled="@(isLoadingEvents || deletingEventId == loadedEvent.EventId)">
                                            @if (deletingEventId == loadedEvent.EventId)
                                            {
                                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                                <span class="ms-1">Deleting...</span>
                                            }
                                            else
                                            {
                                                <i class="bi bi-trash-fill me-2"></i><span>Delete</span>
                                            }
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="card-body py-2 px-3">
                        <p class="card-text mb-1"><small><strong>Start:</strong> @loadedEvent.StartTime.ToString("g")</small></p>
                        <p class="card-text mb-1"><small><strong>End:</strong> @loadedEvent.EndTime.ToString("g")</small></p>
                        <p class="card-text mb-1"><small><strong>Status:</strong> @loadedEvent.Status.ToString()</small></p>
                        <p class="card-text mb-0"><small><strong>Participants:</strong> @GetAttendeeCount(loadedEvent.EventId)</small></p>
                    </div>
                    <div class="card-footer d-grid py-2">
                        <button class="btn btn-primary btn-sm" @onclick="() => ViewDetails(loadedEvent.EventId)" disabled="@(isLoadingEvents || deletingEventId == loadedEvent.EventId)">View</button>
                    </div>
                </div>
            }
            @* Loading Indicator for More Events (Small Screens) *@
            @if (isLoadingEvents)
            {
                <div class="text-center p-2">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading more events...
                </div>
            }
        </div>
        @* SMALL SCREEEN END *@




        @* Section: Error Display (Combined) *@
        @if (loadError != null || !string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @if (loadError != null)
                {
                    <div>Error loading events: @loadError</div>
                }
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div>@errorMessage</div>
                }
            </div>
        }
    }
</div>

@code {
    #region Variables: Data Storage

    /// <summary>
    /// Stores the result returned from the API when requesting all events.
    /// This includes both the event data (if successful) and any error information,
    /// providing a complete picture of the API response.
    /// </summary>
    private Result<List<EventResponse>> eventsResult;
        
    /// <summary>
    /// Collection of all loaded events to display in the UI.
    /// This list is populated progressively for a better user experience,
    /// with events being added one by one with a small delay.
    /// </summary>
    private List<EventResponse> loadedEvents = new List<EventResponse>();

    /// <summary>
    /// Maps event IDs to the number of attendees for each event.
    /// This dictionary is populated by a separate API call that retrieves 
    /// attendance information after the events themselves are loaded. (GetUsersByEventIdAsync)
    /// </summary>
    private Dictionary<int, int> eventAttendeeCount = new Dictionary<int, int>();

    #endregion

    #region Variables: Component State

    /// <summary>
    /// Error message specific to API operations like event deletion.
    /// Displayed to the user when an operation other than the initial
    /// events loading fails.
    /// </summary>
    private string errorMessage;
        
    /// <summary>
    /// Error message specific to the initial event loading process.
    /// Displayed to the user when the API call to retrieve events fails.
    /// </summary>
    private string loadError;

    /// <summary>
    /// Indicates whether the current user has organizer privileges.
    /// Used to conditionally display administrative actions like 
    /// edit and delete buttons for events.
    /// </summary>
    private bool isOrganizer = false;

    /// <summary>
    /// Indicates whether attendee information is currently being loaded.
    /// Used to display loading indicators in the UI for attendee counts.
    /// </summary>  
    private bool isLoadingAttendees = false;

    /// <summary>
    /// Indicates whether the events are currently being loaded from the API.
    /// Used to display a loading indicator in the UI during the initial load.
    /// </summary>
    private bool isLoadingEvents = false;

    /// <summary>
    /// Tracks the ID of the event currently being deleted, or -1 if none.
    /// </summary>
    private int deletingEventId = -1;

    #endregion

    #region Methods: Lifecycle Methods

    /// <summary>
    /// Initializes the component by checking user permissions and loading events.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try 
        {
            // Step 1: Check if the current user is an organizer
            if (await _accessService.IsOrganizerAsync())
            {
                isOrganizer = true;
            }
            else
            {
                isOrganizer = false;
            }

            // Step 2: Load all events from the API
            await LoadEvents();
        }
        catch (Exception ex)
        {
            // Handle any unexpected errors during initialization
            loadError = $"Error initializing page: {ex.Message}";
        }
    }

    #endregion

    #region Methods: Data Loading

    /// <summary>
    /// Loads all events from the event API service and updates the UI progressively.
    /// </summary>
    private async Task LoadEvents()
    {
        try
        {
            // Step 1: Set loading state to true and update UI
            isLoadingEvents = true;
            loadedEvents.Clear(); // Clear existing list
            StateHasChanged(); // Refresh the UI

            // Step 2: Call the API to get all events
            eventsResult = await _eventApiService.GetAllAsync();

            // Step 3: Process the result
            if (eventsResult.IsSuccess && eventsResult.Data != null)
            {
                // Step 4: Add events one by one with small delay for progressive loading effect
                foreach (EventResponse eventResponse in eventsResult.Data)
                {
                    loadedEvents.Add(eventResponse);

                    // Step 5: Update UI after each event is added
                    StateHasChanged(); // Refresh the UI

                    // Step 6: Small delay to show the progressive loading
                    await Task.Delay(20);
                }

                // Step 7: Load attendance counts for each event
                await LoadAttendeeCountsAsync(); //Method is below
            }
            else
            {
                // Step 8: Handle error if API call failed
                loadError = eventsResult.ErrorMessage;
            }
        }
        catch (Exception ex)
        {
            // Step 9: Handle any unexpected exceptions
            loadError = $"Error loading events: {ex.Message}";
        }
        finally
        {
            // Step 10: Reset loading state and update UI
            isLoadingEvents = false;
            StateHasChanged(); // Refresh the UI
        }
    }

    /// <summary>
    /// Loads the number of attendees for each event.
    /// </summary>
    private async Task LoadAttendeeCountsAsync()
    {
        if (loadedEvents != null && loadedEvents.Count > 0)
        {
            // Step 1: Set loading state for attendees and update UI
            isLoadingAttendees = true;
            StateHasChanged(); // Refresh the UI

            try
            {
                // Step 2: For each event, get the list of users attending
                foreach (EventResponse eventResponse in loadedEvents)
            {
                // Step 3: Call API to get users for this event
                var getUserResult = await _eventAttendanceApiService.GetUsersByEventIdAsync(eventResponse.EventId);
                
                // Step 4: Update the dictionary with the count of attendees
                eventAttendeeCount[eventResponse.EventId] = getUserResult.IsSuccess && getUserResult.Data != null ? getUserResult.Data.Count : 0;
                
                // Step 5: Update UI after each event's attendees are loaded
                StateHasChanged(); // Refresh the UI
            }
            }
            catch (Exception ex)
            {
                errorMessage = $"An unexpected error occurred: {ex.Message}";
                StateHasChanged(); // Refresh the UI
            }
            finally
            {
                // Step 6: Reset loading state
                isLoadingAttendees = false;
                StateHasChanged(); // Refresh the UI
            }
        }
    }

    #endregion

    #region Methods: UI Helper Methods

    /// <summary>
    /// Gets the formatted attendee count for an event.
    /// </summary>
    /// <param name="eventId">The ID of the event to get the attendee count for.</param>
    /// <returns>A formatted string with the attendee count or loading message.</returns>
    private string GetAttendeeCount(int eventId)
    {
        // Step 1: Show loading indicator if still loading and count not yet available
        if (isLoadingAttendees && !eventAttendeeCount.ContainsKey(eventId))
        {
            return "Loading...";
        }
        
        // Step 2: Return the count or 0 if not found
        return eventAttendeeCount.ContainsKey(eventId) ? eventAttendeeCount[eventId].ToString() : "0";
    }

    #endregion

    #region Methods: Navigation Methods

    /// <summary>
    /// Navigates to the event details page.
    /// </summary>
    /// <param name="eventId">The ID of the event to view.</param>
    private void ViewDetails(int eventId)
    {
        // Step 1: Navigate to the details page for the specified event
        _navigationManager.NavigateTo($"/events/{eventId}/details");
    }

    /// <summary>
    /// Navigates to the event edit page.
    /// </summary>
    /// <param name="eventId">The ID of the event to edit.</param>
    private void EditEvent(int eventId)
    {
        // Step 1: Navigate to the edit page for the specified event
        _navigationManager.NavigateTo($"/events/{eventId}/edit");
    }

    /// <summary>
    /// Navigates to the event creation page.
    /// </summary>
    private void CreateNewEvent()
    {
        // Step 1: Navigate to the create event page
        _navigationManager.NavigateTo("/events/create");
    }

    #endregion

    #region Methods: Organizer Actions

    /// <summary>
    /// Deletes an event and refreshes the list.
    /// </summary>
    /// <param name="eventId">The ID of the event to delete.</param>
    private async Task DeleteEvent(int eventId)
    {
        // Track deleting state
        deletingEventId = eventId;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Step 1: Call API to delete the event
            var deleteResult = await _eventApiService.DeleteAsync(new DeleteEventRequest(eventId));
            
            // Step 2: Process the result
            if (deleteResult.IsSuccess)
            {
                // Step 3: If successful, reload the events list
                await LoadEvents();
            }
            else
            {
                // Step 4: If deletion failed, show error message
                errorMessage = deleteResult.ErrorMessage ?? "Failed to delete the event.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Step 5: Handle any unexpected exceptions
            errorMessage = $"Error deleting event: {ex.Message}";
            StateHasChanged();
        }
        finally
        {
            // Step 6: Always reset deletingEventId to -1 regardless of outcome
            deletingEventId = -1;
            StateHasChanged();
        }
    }

    #endregion
}