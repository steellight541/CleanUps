@page "/events"
@using CleanUps.Shared.DTOs.Events
@inject NavigationManager _navigationManager
@inject EventApiService _eventApiService
@inject EventAttendanceApiService _eventAttendanceApiService
<div class="card shadow p-4">

    <h3>Events List</h3>

    @if (events == null)
    {
        <p>Loading...</p>
    }
    else if (events.IsSuccess)
    {
        <!-- Table layout for larger screens -->
        <div class="d-none d-md-block mb-2">
            <table class="table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Start time</th>
                        <th>End time</th>
                        <th>Family Friendly?</th>
                        <th>Trash Collected</th>
                        <th>Participants</th>
                        <th>Satus</th>
                        <th>Location</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ev in events.Data)
                    {
                        <tr>
                            <td>@ev.EventId</td>
                            <td>@ev.Title</td>
                            <td>@ev.Description</td>
                            <td>@ev.StartTime.ToShortDateString()</td>
                            <td>@ev.EndTime.ToShortDateString()</td>
                            <td>@(ev.FamilyFriendly ? "Yes" : "No")</td>
                            <td>@ev.TrashCollected</td>
                            <td>@(participantCounts.TryGetValue(ev.EventId, out var count) ? count : 0)</td>
                            <td>@ev.Status.ToString()</td>
                            <td>No location yet</td>
                            <td>
                                <button class="btn btn-primary btn-sm mt-2" @onclick="() => ViewDetails(ev.EventId)">View</button>
                                @if (CurrentUserRole == RoleDTO.Organizer)
                                {
                                    <button class="btn btn-secondary btn-sm mt-2" @onclick="() => EditEvent(ev.EventId)">Edit</button>
                                    <button class="btn btn-danger btn-sm mt-2" @onclick="() => DeleteEvent(ev.EventId)">Delete</button>
                                }

                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- List-group layout for small screens -->
        <div class="d-block d-md-none mb-2">
            <div class="list-group">
                @foreach (var ev in events.Data)
                {
                    <div class="list-group-item">
                        <h5>@ev.Title</h5>
                        <p><strong>Start Time:</strong> @ev.StartTime.ToShortDateString()</p>
                        <p><strong>End Time:</strong> @ev.EndTime.ToShortDateString()</p>
                        <p><strong>Participants:</strong> @(participantCounts.TryGetValue(ev.EventId, out var count) ? count : 0)</p>
                        <div class="d-flex flex-column gap-2">
                            <button class="btn btn-primary btn-sm mt-2" @onclick="() => ViewDetails(ev.EventId)">View</button>
                            @if (CurrentUserRole == RoleDTO.Organizer)
                            {
                                <button class="btn btn-secondary btn-sm mt-2" @onclick="() => EditEvent(ev.EventId)">Edit</button>
                                <button class="btn btn-danger btn-sm mt-2" @onclick="() => DeleteEvent(ev.EventId)">Delete</button>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        @if (CurrentUserRole == RoleDTO.Organizer)
        {
            <!-- Create New Event button -->
            <div class="mb-2">
                <button class="btn btn-success w-100 w-md-auto" @onclick="CreateNewEvent">Create New Event</button>
            </div>
        }
    }
    else
    {
        <p class="text-danger">Error: @events.ErrorMessage</p>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <p class="text-danger">@errorMessage</p>
    }
</div>

@code {
    // Existing code remains unchanged
    private Result<List<EventResponse>> events;
    private Dictionary<int, int> participantCounts = new Dictionary<int, int>();
    private string errorMessage;

    private RoleDTO CurrentUserRole = RoleDTO.Organizer;

    protected override async Task OnInitializedAsync()
    {
        events = await _eventApiService.GetAllEventsAsync();
        if (events.IsSuccess)
        {
            var tasks = events.Data.Select(ev =>
            {
                int attendees = events.Data.Count;

                return new { ev.EventId, Count = attendees };
            });
            var results = tasks;
            participantCounts = results.ToDictionary(r => r.EventId, r => r.Count);
        }
    }

    private void ViewDetails(int eventId)
    {
        _navigationManager.NavigateTo($"/events/{eventId}/details");
    }

    private void EditEvent(int eventId)
    {
        _navigationManager.NavigateTo($"/events/{eventId}/edit");
    }

    private async Task DeleteEvent(int eventId)
    {
        var result = await _eventApiService.DeleteEventAsync(eventId);
        if (result.IsSuccess)
        {
            events = await _eventApiService.GetAllEventsAsync();
            var tasks = events.Data.Select(ev =>
            {
                int attendees = events.Data.Count;
                return new { ev.EventId, Count = attendees };
            });
            var results = tasks;
            participantCounts = results.ToDictionary(r => r.EventId, r => r.Count);
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "An error occurred while deleting the event.";
        }
    }

    private void CreateNewEvent()
    {
        _navigationManager.NavigateTo("/events/create");
    }
}
