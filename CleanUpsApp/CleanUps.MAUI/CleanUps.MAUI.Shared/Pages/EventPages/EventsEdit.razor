@page "/events/edit/{eventId:int}"
@using CleanUps.Shared.DTOs.Events
@inject NavigationManager _navigationManager
@inject EventApiService _eventApiService

@if (eventResult == null)
{
    <p>Loading...</p>
}
else if (!eventResult.IsSuccess)
{
    <p>Error: @eventResult.ErrorMessage</p>
}
else
{
    <EditForm Model="editModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="editModel.Title" class="form-control" />
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <InputText id="description" @bind-Value="editModel.Description" class="form-control" />
        </div>

        <div class="form-group">
            <label for="startTime">StartTime of Event</label>
            <InputDate id="startTime" @bind-Value="editModel.StartTime" class="form-control" />
        </div>

        <div class="form-group">
            <label for="endTime">End Time of Event</label>
            <InputDate id="endTime" @bind-Value="editModel.EndTime" class="form-control" />
        </div>

        <div class="form-check">
            <InputCheckbox id="familyFriendly" @bind-Value="editModel.FamilyFriendly" class="form-check-input" />
            <label class="form-check-label" for="familyFriendly">Family Friendly</label>
        </div>

        <button type="submit">Save</button>
        <button type="button" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int eventId { get; set; }

    private Result<EventResponse> eventResult;
    private EditModel editModel;
    private string errorMessage;

    private class EditModel
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool FamilyFriendly { get; set; }
        public decimal TrashCollected { get; set; }
        public StatusDTO Status { get; set; }
        public decimal Longitude { get; set; }
        public decimal Latitude { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        eventResult = await _eventApiService.GetEventByIdAsync(eventId);
        if (eventResult.IsSuccess)
        {
            editModel = new EditModel
                {
                    Title = eventResult.Data.Title,
                    Description = eventResult.Data.Description,
                    StartTime = eventResult.Data.StartTime,
                    EndTime = eventResult.Data.EndTime,
                    FamilyFriendly = eventResult.Data.FamilyFriendly,
                    TrashCollected = eventResult.Data.TrashCollected,
                    Status = eventResult.Data.Status,
                    Latitude = eventResult.Data.Location.Latitude,
                    Longitude = eventResult.Data.Location.Longitude
                };
        }
    }

    private async Task HandleSubmit()
    {
        var updatedEvent = new UpdateEventRequest(
            eventId,
            editModel.Title,
            editModel.Description,
            editModel.StartTime,
            editModel.EndTime,
            editModel.FamilyFriendly,
            1, //dummy data
            StatusDTO.Ongoing, //dummy data
            Location: new UpdateLocationRequest(eventResult.Data.Location.LocationId, editModel.Latitude, editModel.Longitude)
    );

        var result = await _eventApiService.UpdateEventAsync(eventId, updatedEvent);
        if (result.IsSuccess)
        {
            _navigationManager.NavigateTo("/events");
        }
        else
        {
            errorMessage = result.ErrorMessage;
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/events");
    }
}