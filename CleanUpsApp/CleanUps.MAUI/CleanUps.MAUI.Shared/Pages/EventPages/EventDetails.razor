@page "/events/{eventId:int}"
@using CleanUps.Shared.DTOs.Events
@using CleanUps.Shared.DTOs.Users
@inject EventApiService _eventApiService
@inject EventAttendanceApiService _eventAttendanceApiService
@inject UserApiService _userApiService

<h3>Event Details</h3>

@if (eventResult == null || usersResult == null || attendeesResult == null)
{
    <p>Loading...</p>
}
else if (!eventResult.IsSuccess)
{
    <p class="text-danger">Error: @eventResult.ErrorMessage</p>
}
else
{
    <div>
        <h4>@eventResult.Data.Description</h4>
        <p><strong>Event ID:</strong> @eventResult.Data.EventId</p>
        <p><strong>Status:</strong> @eventResult.Data.Status</p>
        <p><strong>Family Friendly:</strong> @(eventResult.Data.FamilyFriendly ? "Yes" : "No")</p>
        <p><strong>Number of Attendees:</strong> @eventResult.Data.NumberOfAttendees</p>
        <p><strong>Participants Signed Up:</strong> @(attendeesResult.Data?.Count ?? 0)</p>
    </div>

    <div class="form-group mt-3">
        <label for="userSelect">Sign Up User:</label>
        <select id="userSelect" class="form-control" @bind="selectedUserId">
            <option value="0">Select a user</option>
            @foreach (var user in usersResult.Data)
            {
                bool isAlreadySignedUp = attendeesResult.Data?.Any(a => a.UserId == user.UserId) ?? false;
                <option value="@user.UserId" disabled="@isAlreadySignedUp">
                    @user.Name @(isAlreadySignedUp ? "(Already Signed Up)" : "")
                </option>
            }
        </select>
    </div>

    <button class="btn btn-primary mt-2" @onclick="SubmitAttendance">Sign Up</button>

    @if (!string.IsNullOrEmpty(message))
    {
        <p class="@messageClass">@message</p>
    }
}

@code {
    [Parameter]
    public int eventId { get; set; }

    private Result<EventResponse> eventResult;
    private Result<List<UserResponse>> usersResult;
    private Result<List<UserResponse>> attendeesResult; // Added to fetch attendees
    private int selectedUserId;
    private string message;
    private string messageClass;

    protected override async Task OnInitializedAsync()
    {
        eventResult = await _eventApiService.GetEventByIdAsync(eventId);
        usersResult = await _userApiService.GetAllUsersAsync();
        attendeesResult = await _eventAttendanceApiService.GetUsersByEventIdAsync(eventId); // Fetch attendees
    }

    private async Task SubmitAttendance()
    {
        if (selectedUserId == 0)
        {
            message = "Please select a user.";
            messageClass = "text-danger";
            return;
        }

        var attendance = new EventAttendanceDTO
        (
            selectedUserId,
            eventId,
            DateTime.Now
        );

        var result = await _eventAttendanceApiService.CreateAttendanceAsync(attendance);
        if (result.IsSuccess)
        {
            message = "Attendance registered successfully!";
            messageClass = "text-success";
            // Refresh attendees list to update the dropdown
            attendeesResult = await _eventAttendanceApiService.GetUsersByEventIdAsync(eventId);
        }
        else
        {
            message = $"Error: {result.ErrorMessage}";
            messageClass = "text-danger";
        }
    }

}
<style>
    #userSelect option:disabled {
        background-color: #8e1420; /* Darker gray background */
        color: #ffffff; /* White text for contrast */
    }
</style>