@page "/events/create"
@inject NavigationManager _navigationManager
@inject EventApiService _eventApiService

<h3>Create New Event</h3>

<EditForm Model="eventCreateModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="eventCreateModel.Title" class="form-control" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="eventCreateModel.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label for="startTime">Start Time of Event</label>
        <InputDate id="startTime" @bind-Value="eventCreateModel.StartTime" class="form-control" />
    </div>

    <div class="form-group">
        <label for="endTime">End Time of Event</label>
        <InputDate id="endTime" @bind-Value="eventCreateModel.EndTime" class="form-control" />
    </div>

    <div class="form-check">
        <InputCheckbox id="familyFriendly" @bind-Value="eventCreateModel.FamilyFriendly" class="form-check-input" />
        <label class="form-check-label" for="familyFriendly">Family Friendly</label>
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private EventCreateModel eventCreateModel = new EventCreateModel();
    private string errorMessage;

    private async Task HandleSubmit()
    {
        var newEvent = new CreateEventRequest(
            Title: eventCreateModel.Title,
            Description: eventCreateModel.Description,
            StartTime: eventCreateModel.StartTime,
            EndTime: eventCreateModel.EndTime,
            FamilyFriendly: eventCreateModel.FamilyFriendly,
            Location: new CreateLocationRequest(eventCreateModel.Longitude, eventCreateModel.Latitude)
    );

        var result = await _eventApiService.CreateEventAsync(newEvent);
        if (result.IsSuccess)
        {
            _navigationManager.NavigateTo("/events");
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "An error occurred while creating the event.";
        }
    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/events");
    }

    private class EventCreateModel
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public bool FamilyFriendly { get; set; }
        public decimal Longitude { get; set; } = 50;
        public decimal Latitude { get; set; } = 50;
    }
}