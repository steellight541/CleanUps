@page "/events/create"
@inject EventApiService EventApiService
@inject NavigationManager NavigationManager


<h3>Create New Event</h3>

<EditForm Model="eventCreateModel" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="eventCreateModel.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label for="dateOfEvent">Date of Event</label>
        <InputDate id="dateOfEvent" @bind-Value="eventCreateModel.DateOfEvent" class="form-control" />
    </div>

    <div class="form-group">
        <label for="startTime">Start Time</label>
        <input type="time" id="startTime" @bind="eventCreateModel.StartTime" class="form-control" />
    </div>

    <div class="form-group">
        <label for="endTime">End Time</label>
        <input type="time" id="endTime" @bind="eventCreateModel.EndTime" class="form-control" />
    </div>

    <div class="form-group">
        <label for="streetName">Street Name</label>
        <InputText id="streetName" @bind-Value="eventCreateModel.StreetName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="city">City</label>
        <InputText id="city" @bind-Value="eventCreateModel.City" class="form-control" />
    </div>

    <div class="form-group">
        <label for="zipCode">Zip Code</label>
        <InputText id="zipCode" @bind-Value="eventCreateModel.ZipCode" class="form-control" />
    </div>

    <div class="form-group">
        <label for="country">Country</label>
        <InputText id="country" @bind-Value="eventCreateModel.Country" class="form-control" />
    </div>

    <div class="form-group">
        <label for="status">Status</label>
        <InputText id="status" @bind-Value="eventCreateModel.Status" class="form-control" />
    </div>

    <div class="form-check">
        <InputCheckbox id="familyFriendly" @bind-Value="eventCreateModel.FamilyFriendly" class="form-check-input" />
        <label class="form-check-label" for="familyFriendly">Family Friendly</label>
    </div>

    <div class="form-group">
        <label for="trashCollected">Trash Collected (kg)</label>
        <InputNumber id="trashCollected" @bind-Value="eventCreateModel.TrashCollected" class="form-control" />
    </div>

    <div class="form-group">
        <label for="numberOfAttendees">Number of Attendees</label>
        <InputNumber id="numberOfAttendees" @bind-Value="eventCreateModel.NumberOfAttendees" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private EventCreateModel eventCreateModel = new EventCreateModel();
    private string errorMessage;

    private async Task HandleSubmit()
    {
        var newEvent = new EventDTO(
            EventId: 0,  // Assuming 0 or default for new events
            StreetName: eventCreateModel.StreetName,
            City: eventCreateModel.City,
            ZipCode: eventCreateModel.ZipCode,
            Country: eventCreateModel.Country,
            Description: eventCreateModel.Description,
            DateOfEvent: eventCreateModel.DateOfEvent,
            StartTime: eventCreateModel.StartTime,
            EndTime: eventCreateModel.EndTime,
            Status: eventCreateModel.Status,
            FamilyFriendly: eventCreateModel.FamilyFriendly,
            TrashCollected: eventCreateModel.TrashCollected,
            NumberOfAttendees: eventCreateModel.NumberOfAttendees
        );

        var result = await EventApiService.CreateEventAsync(newEvent);
        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/events");
        }
        else
        {
            errorMessage = result.ErrorMessage ?? "An error occurred while creating the event.";
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/events");
    }

    private class EventCreateModel
    {
        public string Description { get; set; } = string.Empty;
        public DateOnly DateOfEvent { get; set; }
        public TimeOnly StartTime { get; set; }
        public TimeOnly EndTime { get; set; }
        public string StreetName { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string ZipCode { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public bool FamilyFriendly { get; set; }
        public decimal? TrashCollected { get; set; }
        public int NumberOfAttendees { get; set; }
    }
}