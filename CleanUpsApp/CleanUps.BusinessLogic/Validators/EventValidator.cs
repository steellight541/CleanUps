using CleanUps.BusinessLogic.Interfaces.PrivateAccess;
using CleanUps.Shared.DTOs;
using CleanUps.Shared.ErrorHandling;

namespace CleanUps.BusinessLogic.Validators
{
    internal class EventValidator : IValidator<EventDTO>
    {
        public Result<EventDTO> ValidateForCreate(EventDTO eventDto)
        {
            if (eventDto == null)
            {
                return Result<EventDTO>.BadRequest("Event DTO cannot be null.");
            }

            ValidateCommonFields(eventDto);

            // For create, EventId should not be set (it will be generated by the database)
            if (eventDto.EventId != 0)
            {
                return Result<EventDTO>.BadRequest("EventId should not be set when creating a new event.");
            }
            return Result<EventDTO>.Ok(eventDto);
        }

        public Result<EventDTO> ValidateForUpdate(int id, EventDTO eventDto)
        {
            if (eventDto == null)
            {
                return Result<EventDTO>.BadRequest("Event DTO cannot be null.");
            }
            if (id != eventDto.EventId)
            {
                return Result<EventDTO>.BadRequest("Event-ID and the Id from URL does not match");
            }
            if (id <= 0)
            {
                return Result<EventDTO>.BadRequest("Event ID must be greater than zero.");
            }

            if (eventDto.EventId <= 0)
            {
                return Result<EventDTO>.BadRequest("Event ID must be greater than zero.");
            }

            ValidateCommonFields(eventDto);
            return Result<EventDTO>.Ok(eventDto);
        }

        public Result<string> ValidateId(int id)
        {
            if (id <= 0)
            {
                return Result<string>.BadRequest("Event ID must be greater than zero.");
            }
            return Result<string>.Ok("Id is valid");
        }

        private Result<EventDTO> ValidateCommonFields(EventDTO eventDto)
        {
            if (string.IsNullOrWhiteSpace(eventDto.StreetName))
            {
                return Result<EventDTO>.BadRequest("StreetName is required.");
            }

            if (string.IsNullOrWhiteSpace(eventDto.City))
            {
                return Result<EventDTO>.BadRequest("City is required.");
            }

            if (string.IsNullOrWhiteSpace(eventDto.ZipCode))
            {
                return Result<EventDTO>.BadRequest("ZipCode is required.");
            }

            if (string.IsNullOrWhiteSpace(eventDto.Country))
            {
                return Result<EventDTO>.BadRequest("Country is required.");
            }

            if (string.IsNullOrWhiteSpace(eventDto.Description))
            {
                return Result<EventDTO>.BadRequest("Description is required.");
            }

            if (string.IsNullOrWhiteSpace(eventDto.Status))
            {
                return Result<EventDTO>.BadRequest("Status is required.");
            }

            if (eventDto.DateOfEvent < DateOnly.FromDateTime(DateTime.Today))
            {
                return Result<EventDTO>.BadRequest("Event date cannot be in the past.");
            }

            if (eventDto.StartTime >= eventDto.EndTime)
            {
                return Result<EventDTO>.BadRequest("StartTime must be before EndTime.");
            }

            if (eventDto.TrashCollected.HasValue && eventDto.TrashCollected < 0)
            {
                return Result<EventDTO>.BadRequest("TrashCollected cannot be negative.");
            }

            if (eventDto.NumberOfAttendees < 0)
            {
                return Result<EventDTO>.BadRequest("NumberOfAttendees cannot be negative.");
            }
            return Result<EventDTO>.Ok(eventDto);
        }
    }
}
