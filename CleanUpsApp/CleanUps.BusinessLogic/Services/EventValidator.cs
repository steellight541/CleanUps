using CleanUps.BusinessLogic.Interfaces.PrivateAccess;
using CleanUps.Shared.DTOs;

namespace CleanUps.BusinessLogic.Services
{
    /// <summary>
    /// Validates Event data in the CleanUps application.
    /// This class ensures that <see cref="EventDTO"/> objects and event IDs meet the required business rules before processing.
    /// </summary>
    internal class EventValidator : IDTOValidator<EventDTO>
    {
        /// <summary>
        /// Validates an <see cref="EventDTO"/> for creating a new event.
        /// Ensures the DTO is suitable for creating a new event, including that the <see cref="EventDTO.EventId"/> is not set.
        /// </summary>
        /// <param name="eventDto">The <see cref="EventDTO"/> to validate for creation.</param>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="eventDto"/> is <see langword="null"/>.</exception>
        /// <exception cref="ArgumentException">Thrown when <paramref name="eventDto"/> fails validation (e.g., required fields are missing, invalid data, or <see cref="EventDTO.EventId"/> is set).</exception>
        public void ValidateForCreate(EventDTO eventDto)
        {
            if (eventDto == null)
            {
                throw new ArgumentNullException(nameof(eventDto), "Event DTO cannot be null.");
            }

            ValidateCommonFields(eventDto);

            // For create, EventId should not be set (it will be generated by the database)
            if (eventDto.EventId != 0)
            {
                throw new ArgumentException("EventId should not be set when creating a new event.", nameof(eventDto.EventId));
            }
        }

        /// <summary>
        /// Validates an <see cref="EventDTO"/> for updating an existing event.
        /// Ensures the DTO is suitable for updating an event, including that the <see cref="EventDTO.EventId"/> is valid.
        /// </summary>
        /// <param name="eventDto">The <see cref="EventDTO"/> to validate for updating.</param>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="eventDto"/> is <see langword="null"/>.</exception>
        /// <exception cref="ArgumentException">Thrown when <paramref name="eventDto"/> fails validation (e.g., required fields are missing, invalid data, or <see cref="EventDTO.EventId"/> is invalid).</exception>
        public void ValidateForUpdate(int id, EventDTO eventDto)
        {
            if (eventDto == null)
            {
                throw new ArgumentNullException(nameof(eventDto), "Event DTO cannot be null.");
            }
            if (id != eventDto.EventId)
            {
                throw new ArgumentException("Event ID and Id from URL does not match", ("EventId: " + nameof(eventDto.EventId)+ " " + "Id from URL: " + nameof(id)));
            }
            if (id <= 0)
            {
                throw new ArgumentException("Event ID must be greater than zero.", nameof(eventDto.EventId));
            }

            if (eventDto.EventId <= 0)
            {
                throw new ArgumentException("Event ID must be greater than zero.", nameof(eventDto.EventId));
            }

            ValidateCommonFields(eventDto);
        }

        /// <summary>
        /// Validates an event ID to ensure it is a positive integer.
        /// </summary>
        /// <param name="id">The <see cref="int"/> identifier of the event to validate.</param>
        /// <exception cref="ArgumentException">Thrown when <paramref name="id"/> is less than or equal to zero.</exception>
        public void ValidateId(int id)
        {
            if (id <= 0)
            {
                throw new ArgumentException("Event ID must be greater than zero.", nameof(id));
            }
        }

        /// <summary>
        /// Validates common fields of an <see cref="EventDTO"/> that are required for both creating and updating events.
        /// Checks for required fields, valid dates, time ranges, and non-negative values.
        /// </summary>
        /// <param name="eventDto">The <see cref="EventDTO"/> whose fields are to be validated.</param>
        /// <exception cref="ArgumentException">Thrown when any common field in <paramref name="eventDto"/> fails validation (e.g., required fields are missing, dates are in the past, or values are invalid).</exception>
        private void ValidateCommonFields(EventDTO eventDto)
        {
            if (string.IsNullOrWhiteSpace(eventDto.StreetName))
            {
                throw new ArgumentException("StreetName is required.", nameof(eventDto.StreetName));
            }

            if (string.IsNullOrWhiteSpace(eventDto.City))
            {
                throw new ArgumentException("City is required.", nameof(eventDto.City));
            }

            if (string.IsNullOrWhiteSpace(eventDto.ZipCode))
            {
                throw new ArgumentException("ZipCode is required.", nameof(eventDto.ZipCode));
            }

            if (string.IsNullOrWhiteSpace(eventDto.Country))
            {
                throw new ArgumentException("Country is required.", nameof(eventDto.Country));
            }

            if (string.IsNullOrWhiteSpace(eventDto.Description))
            {
                throw new ArgumentException("Description is required.", nameof(eventDto.Description));
            }

            if (string.IsNullOrWhiteSpace(eventDto.Status))
            {
                throw new ArgumentException("Status is required.", nameof(eventDto.Status));
            }

            if (eventDto.DateOfEvent < DateOnly.FromDateTime(DateTime.Today))
            {
                throw new ArgumentException("Event date cannot be in the past.", nameof(eventDto.DateOfEvent));
            }

            if (eventDto.StartTime >= eventDto.EndTime)
            {
                throw new ArgumentException("StartTime must be before EndTime.", nameof(eventDto.StartTime));
            }

            if (eventDto.TrashCollected.HasValue && eventDto.TrashCollected < 0)
            {
                throw new ArgumentException("TrashCollected cannot be negative.", nameof(eventDto.TrashCollected));
            }

            if (eventDto.NumberOfAttendees < 0)
            {
                throw new ArgumentException("NumberOfAttendees cannot be negative.", nameof(eventDto.NumberOfAttendees));
            }
        }
    }
}
